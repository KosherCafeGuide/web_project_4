!function(){"use strict";var e=class{constructor(e,t){this.settings=e,this.formElement=t}_hideInputError(e){const t=this.formElement.querySelector("#"+e.id+"-error");t.textContent="",t.classList.remove(this.settings.errorClass),e.classList.remove(this.settings.inputErrorClass)}_showInputError(e){const t=this.formElement.querySelector("#"+e.id+"-error");t.textContent=e.validationMessage,t.classList.add(this.settings.errorClass),e.classList.add(this.settings.inputErrorClass)}_checkInputValidity(e){e.validity.valid?this._hideInputError(e):this._showInputError(e)}_hasInvalidInput(){return this.inputList.some((e=>!e.validity.valid))}_toggleButtonState(){this._hasInvalidInput()?(this.button.classList.add(this.settings.inactiveButtonClass),this.button.disabled=!0):(this.button.classList.remove(this.settings.inactiveButtonClass),this.button.disabled=!1)}_setEventListners(){this.inputList=[...this.formElement.querySelectorAll(this.settings.inputSelector)],this.button=this.formElement.querySelector(this.settings.submitButtonSelector),this.inputList.forEach((e=>{e.addEventListener("input",(()=>{this._checkInputValidity(e),this._toggleButtonState()}))})),this._toggleButtonState()}enableValidation(){this.formElement.addEventListener("submit",(e=>e.preventDefault())),this._setEventListners()}resetValidation(){this.inputList.forEach((e=>{this._hideInputError(e)})),this._toggleButtonState()}};const t={formSelector:".popup__form",inputSelector:".popup__input",submitButtonSelector:".popup__button",inactiveButtonClass:"popup__button_disabled",inputErrorClass:"popup__input_type_error",errorClass:"popup__error_visible"};var s=class{constructor(e){this.popupElement=document.querySelector(e),this._handleEscUp=this._handleEscUp.bind(this),this.close=this.close.bind(this),this.open=this.open.bind(this)}_handleEscUp(e){e.preventDefault(),"Escape"===e.key&&this.close()}setEventListeners(){this.popupElement.querySelector(".cancel").addEventListener("click",this.close),this.popupElement.addEventListener("mousedown",(e=>{e.target===this.popupElement&&this.close()}))}_handleOverlayClick(e){e.target===this.popupElement&&this.close()}open(){this.popupElement.classList.add("popup_opened"),document.addEventListener("keyup",this._handleEscUp)}close(){this.popupElement.classList.remove("popup_opened"),document.removeEventListener("keyup",this._handleEscUp)}},i=class extends s{constructor(e){let{popupSelector:t,handleFormSubmit:s}=e;var i,n;super(t),n=()=>{this._form.reset(),super.close()},(i="close")in this?Object.defineProperty(this,i,{value:n,enumerable:!0,configurable:!0,writable:!0}):this[i]=n,this._handleFormSubmit=s,this._form=this.popupElement.querySelector(".popup__form"),this._submitBtn=this._form.querySelector(".popup__button")}_getInputValues(){const e=[...this._form.querySelectorAll(".popup__input")],t={};return e.forEach((e=>{t[e.name]=e.value})),t}changeSubmitBtnText(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"saving";this._submitBtn.textContent=e}_formSubmit(){this._handleFormSubmit(this._getInputValues())}setEventListeners(){super.setEventListeners(),this._form.addEventListener("submit",(e=>this._formSubmit(e)))}prefillForm(e){[...this._form.querySelectorAll(".popup__input")].forEach((t=>{t.value=e[t.name]}))}};const n=new class{constructor(e){let{baseURL:t,headers:s}=e;this.baseURL=t,this.headers=s}_customFetch(e){return fetch(e,{method:arguments.length>1&&void 0!==arguments[1]?arguments[1]:"GET",headers:this.headers}).then((e=>e.ok?e.json():Promise.reject(e.statusText))).catch((e=>{console.log(e)}))}getInitialCards(){return this._customFetch("".concat(this.baseURL,"/cards"))}getUserInfo(){return this._customFetch("".concat(this.baseURL,"/users/me"))}editProfile(e){let{userName:t,about:s}=e;return fetch("".concat(this.baseURL,"/users/me"),{method:"PATCH",headers:this.headers,body:JSON.stringify({name:t,about:s})})}addCard(e){let{name:t,link:s}=e;return fetch("".concat(this.baseURL,"/cards"),{method:"POST",headers:this.headers,body:JSON.stringify({name:t,link:s})})}deleteCard(e){return this._customFetch("".concat(this.baseURL,"/cards/").concat(e),"DELETE")}getLikesCount(e){return fetch("".concat(this.baseURL,"/cards").concat(e),{headers:this.headers}).then((e=>e.json())).then((e=>e.likes.length))}isMyCard(e){return fetch("".concat(this.baseURL,"/cards/").concat(e),{headers:this.headers}).then((e=>e.json())).then((e=>e.owner._id===this.authorisation))}likeCard(e){return this._customFetch("".concat(this.baseURL,"/cards/likes/").concat(e),"PUT")}unlikeCard(e){return this._customFetch("".concat(this.baseURL,"/cards/likes/").concat(e),"DELETE")}updateAvatar(e){let{link:t}=e;return console.log("link",t),fetch("".concat(this.baseURL,"/users/me/avatar"),{method:"PATCH",headers:this.headers,body:JSON.stringify({avatar:t})}).then((e=>e.ok?e.json():Promise.reject(e.statusText))).catch((e=>{console.log(e)}))}}({baseURL:"https://around.nomoreparties.co/v1/group-12",headers:{authorization:"077e02f5-469c-4925-a110-e7daac9f6ead","Content-Type":"application/json"}});const r=new class{constructor(e){let{nameSelector:t,jobSelector:s,avatarSelector:i}=e;this.nameElement=document.querySelector(t),this.jobElement=document.querySelector(s),this.avatarElement=document.querySelector(i)}getUserInfo(){return{name:this.nameElement.textContent,job:this.jobElement.textContent}}setUserInfo(e){let{userName:t,job:s,userID:i,avatarURL:n}=e;this.nameElement.textContent=t,this.jobElement.textContent=s,this.userID=i,this.avatarElement.style.backgroundImage="url(".concat(n,")")}getUserID(){return this.userID}setAvatar(e){this.avatarElement.style.backgroundImage="url(".concat(e,")")}}({nameSelector:".profile__name",jobSelector:".profile__job",avatarSelector:".profile__avatar"}),o=new class{constructor(e,t){let{renderer:s}=e;this._renderer=s,this._container=document.querySelector(t)}addItem(e){this._container.prepend(e)}renderItems(e){e.forEach((e=>{this._renderer(e)}))}}({renderer:e=>{let t=e.owner._id===a;const s=new class{constructor(e,t){this._title=e.data.name,this._imageUrl=e.data.link,this._cardID=e.data._id,this._ownerID=e.data.owner._id,this._likes=e.data.likes,this._handleCardClick=e.handleCardClick,this._confirmDelete=e.confirmDelete,this._toggleMyLikeTo=e.toggleMyLikeTo,this._templateSelector=t,this._doILike=this._doILike.bind(this)}_getTemplate(){this._cardElement=document.querySelector(this._templateSelector).content.querySelector(".element").cloneNode(!0)}_addDataToCard(){this.title=this._cardElement.querySelector(".element__image-title"),this.image=this._cardElement.querySelector(".element__image"),this.likesCount=this._cardElement.querySelector(".element__likes-count"),void 0===this._likes&&(this._likes=[]),this.likesCount.textContent=this._likes.length,this.title.textContent=this._title,this.image.src=this._imageUrl,this.image.alt=this._title}deleteCard(){this._cardElement.remove(),this._cardElement=null}_doILike(e){return e._id===this._myID}_addEventListeners(e){const t=this._cardElement.querySelector(".element__delete-btn");e?(t.classList.remove("hide"),t.addEventListener("click",(()=>{this._confirmDelete(this._cardID)}))):t.classList.add("hide"),this.likeBtn=this._cardElement.querySelector(".element__like-toggle"),this.isLikedByMe=this._likes.find(this._doILike),this._setLikeIcon(),this.likeBtn.addEventListener("click",(()=>{this.isLikedByMe=!this.isLikedByMe,this.isLikedByMe?this.likesCount.textContent=Number(this.likesCount.textContent)+1:this.likesCount.textContent=Number(this.likesCount.textContent)-1,this._toggleMyLikeTo(this._cardID,this.isLikedByMe),this._setLikeIcon()})),this.image.addEventListener("click",(()=>{this._handleCardClick({link:this._imageUrl,name:this._title})}))}_setLikeIcon(){this.isLikedByMe?this.likeBtn.classList.add("element__like-toggle-active"):this.likeBtn.classList.remove("element__like-toggle-active")}generateCard(e,t){return this._myID=t,this._getTemplate(),this._addDataToCard(),this._addEventListeners(e),this._cardElement}}({data:e,handleCardClick:()=>{d(e)},confirmDelete:e=>{m(e)},toggleMyLikeTo:(e,t)=>{t?n.likeCard(e):n.unlikeCard(e)}},"#element");o.addItem(s.generateCard(t,a))}},".elements");let a="0",l=!1;function c(){Promise.all([n.getInitialCards(),n.getUserInfo()]).then((e=>{let[t,s]=e;!0===l&&(location.href=location.href,l=!1),a=s._id,o.renderItems(t),r.setUserInfo({userName:s.name,job:s.about,userID:s._id,avatarURL:s.avatar})}))}c();const h=new class extends s{constructor(){var e,t;super(...arguments),t=e=>{let{link:t,name:s}=e;this.popupElement.querySelector(".popup__image-title").textContent=s;const i=this.popupElement.querySelector(".popup__image");i.src=t,i.alt=s,super.open()},(e="open")in this?Object.defineProperty(this,e,{value:t,enumerable:!0,configurable:!0,writable:!0}):this.open=t}}(".popup-image"),d=e=>{h.open(e)},u=new i({popupSelector:".popup-profile-form",handleFormSubmit:e=>{u.changeSubmitBtnText("Updating profile information"),n.editProfile({userName:e.name,about:e.job}).then((t=>{t.ok?(r.setUserInfo({userName:e.name,job:e.job}),l=!0,u.changeSubmitBtnText("Profile Information updated successfully")):(console.log("error updating User Profile"),console.log(t.statusText),u.changeSubmitBtnText(t.statusText))})).finally((e=>{u.changeSubmitBtnText("Save"),u.close()}))}}),p=new class extends s{constructor(e){let{popupSelector:t,handleSubmit:s}=e;super(t),this._handleSubmit=s,this._confirmation=this.popupElement.querySelector(".popup__confirmation")}_confirmSubmit(e){e.preventDefault(),this._handleSubmit(this.cardID),this.close()}open(e){console.log("Popup with Confirmation Open for deleting Card ID ",e),this.cardID=e,super.open()}setEventListeners(){super.setEventListeners(),this._confirmation.addEventListener("submit",(e=>this._confirmSubmit(e)))}}({popupSelector:".popup-delete-confirmation",handleSubmit:e=>{n.deleteCard(e).then((e=>{"This post has been deleted"===e.message?(l=!0,c()):reject("error while deleting image from server")})).catch((e=>{console.log(e)})).finally((e=>{p.close()}))}}),m=e=>{p.open(e)},_=new i({popupSelector:".popup-place-form",handleFormSubmit:e=>{_.changeSubmitBtnText("Adding new photo"),n.addCard(e).then((t=>{e.owner={_id:r.getUserID()},t.ok?(l=!0,c(),_.changeSubmitBtnText("New photo successfully added")):console.log("Error adding Card")})).catch({}).finally((e=>{_.changeSubmitBtnText("Save"),_.close()}))}}),g=new i({popupSelector:".popup-avatar-form",handleFormSubmit:e=>{g.changeSubmitBtnText("Updating avatar image"),n.updateAvatar(e).then((t=>{t.avatar===e.link?(l=!0,g.changeSubmitBtnText("Avatar successfully updated"),c()):console.log("Error changing Avatar image")})).catch({}).finally((e=>{g.changeSubmitBtnText("Save"),g.close()}))}}),b=new e(t,u.popupElement),E=new e(t,_.popupElement),f=new e(t,g.popupElement);h.setEventListeners(),u.setEventListeners(),_.setEventListeners(),p.setEventListeners(),g.setEventListeners(),b.enableValidation(),E.enableValidation(),f.enableValidation();const v=document.querySelector(".profile__edit-btn"),S=document.querySelector(".profile__add-btn"),L=document.querySelector(".profile__edit-avatar-btn");v.addEventListener("click",(()=>{u.open(),u.prefillForm(r.getUserInfo()),b.resetValidation()})),S.addEventListener("click",(()=>{_.open(),E.resetValidation()})),L.addEventListener("click",(()=>{g.open(),f.resetValidation()}))}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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cEssRUFBbUJzSixFQUFjbkosY0FDMUVrSyxFQUFxQixJQUFJRCxFQUFjcEssRUFBbUJpSyxFQUFhOUosY0FDdkVtSyxFQUE0QixJQUFJRixFQUFjcEssRUFBbUJrSyxFQUFrQi9KLGNBSXpGaUosRUFBV3pJLG9CQUNYMkksRUFBYzNJLG9CQUNkc0osRUFBYXRKLG9CQUNiOEksRUFBd0I5SSxvQkFDeEJ1SixFQUFrQnZKLG9CQVNsQndKLEVBQXFCdkssbUJBQ3JCeUssRUFBbUJ6SyxtQkFDbkIwSyxFQUEwQjFLLG1CQUsxQixNQUFNMkssRUFBa0JuSyxTQUFTbkMsY0FBYyxzQkFDekN1TSxFQUFnQnBLLFNBQVNuQyxjQUFjLHFCQUN2Q3dNLEVBQWlCckssU0FBU25DLGNBQWMsNkJBTzlDc00sRUFBZ0I1SyxpQkFBaUIsU0FOTSxLQUNuQzJKLEVBQWM5SSxPQUNkOEksRUFBY3hILFlBQVk0QyxFQUFTeEIsZUFDbkNpSCxFQUFxQnBLLHFCQVN6QnlLLEVBQWM3SyxpQkFBaUIsU0FKSixLQUN2QnNLLEVBQWF6SixPQUNiNkosRUFBbUJ0SyxxQkFPdkIwSyxFQUFlOUssaUJBQWlCLFNBSk4sS0FDdEJ1SyxFQUFrQjFKLE9BQ2xCOEosRUFBMEJ2SyxxQiIsInNvdXJjZXMiOlsid2VicGFjazovL3Byb2plY3RfOC8uL3NyYy9jb21wb25lbnRzL0NhcmQuanMiLCJ3ZWJwYWNrOi8vcHJvamVjdF84Ly4vc3JjL2NvbXBvbmVudHMvRm9ybVZhbGlkYXRvci5qcyIsIndlYnBhY2s6Ly9wcm9qZWN0XzgvLi9zcmMvdXRpbHMvY29uc3RhbnRzLmpzIiwid2VicGFjazovL3Byb2plY3RfOC8uL3NyYy9jb21wb25lbnRzL1BvcHVwLmpzIiwid2VicGFjazovL3Byb2plY3RfOC8uL3NyYy9jb21wb25lbnRzL1BvcHVwV2l0aEZvcm0uanMiLCJ3ZWJwYWNrOi8vcHJvamVjdF84Ly4vc3JjL2NvbXBvbmVudHMvQXBpLmpzIiwid2VicGFjazovL3Byb2plY3RfOC8uL3NyYy9wYWdlcy9pbmRleC5qcyIsIndlYnBhY2s6Ly9wcm9qZWN0XzgvLi9zcmMvY29tcG9uZW50cy9Vc2VySW5mby5qcyIsIndlYnBhY2s6Ly9wcm9qZWN0XzgvLi9zcmMvY29tcG9uZW50cy9TZWN0aW9uLmpzIiwid2VicGFjazovL3Byb2plY3RfOC8uL3NyYy9jb21wb25lbnRzL1BvcHVwV2l0aEltYWdlLmpzIiwid2VicGFjazovL3Byb2plY3RfOC8uL3NyYy9jb21wb25lbnRzL1BvcHVwV2l0aENvbmZpcm1hdGlvbi5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvL0NhcmQgY2xhc3Mgd2l0aCBFeHBvcnRcclxuY2xhc3MgQ2FyZCB7XHJcbiAgICBjb25zdHJ1Y3RvcihkYXRhLCB0ZW1wbGF0ZVNlbGVjdG9yKSB7XHJcbiAgICAgICAgdGhpcy5fdGl0bGUgPSBkYXRhLmRhdGEubmFtZTsgLy9ub3Qgc3VyZSB3aHkgSSBuZWVkIHRoZSBleHRyYSBcImRhdGEuXCIgaGVyZSFcclxuICAgICAgICB0aGlzLl9pbWFnZVVybCA9IGRhdGEuZGF0YS5saW5rO1xyXG4gICAgICAgIHRoaXMuX2NhcmRJRCA9IGRhdGEuZGF0YS5faWQ7XHJcbiAgICAgICAgdGhpcy5fb3duZXJJRCA9IGRhdGEuZGF0YS5vd25lci5faWQ7XHJcbiAgICAgICAgdGhpcy5fbGlrZXMgPSBkYXRhLmRhdGEubGlrZXM7XHJcblxyXG4gICAgICAgIHRoaXMuX2hhbmRsZUNhcmRDbGljayA9IGRhdGEuaGFuZGxlQ2FyZENsaWNrO1xyXG4gICAgICAgIHRoaXMuX2NvbmZpcm1EZWxldGUgPSBkYXRhLmNvbmZpcm1EZWxldGU7IC8vcmV0dXJucyB0cnVlIGlmIHNob3VsZCBkZWxldGUgXHJcbiAgICAgICAgdGhpcy5fdG9nZ2xlTXlMaWtlVG8gPSBkYXRhLnRvZ2dsZU15TGlrZVRvOyAvL3RvZ2dsZSBsaWtlIHN0YXR1cyBvbiBzZXJ2ZXJcclxuXHJcblxyXG4gICAgICAgIHRoaXMuX3RlbXBsYXRlU2VsZWN0b3IgPSB0ZW1wbGF0ZVNlbGVjdG9yOyAvLyBcIiNjYXJkLXRlbXBsYXRlXCJcclxuXHJcbiAgICAgICAgdGhpcy5fZG9JTGlrZSA9IHRoaXMuX2RvSUxpa2UuYmluZCh0aGlzKTtcclxuICAgIH07XHJcbiAgICBfZ2V0VGVtcGxhdGUoKSB7XHJcbiAgICAgICAgdGhpcy5fY2FyZEVsZW1lbnQgPSBkb2N1bWVudFxyXG4gICAgICAgICAgICAucXVlcnlTZWxlY3Rvcih0aGlzLl90ZW1wbGF0ZVNlbGVjdG9yKVxyXG4gICAgICAgICAgICAuY29udGVudFxyXG4gICAgICAgICAgICAucXVlcnlTZWxlY3RvcihcIi5lbGVtZW50XCIpXHJcbiAgICAgICAgICAgIC5jbG9uZU5vZGUodHJ1ZSk7XHJcbiAgICB9XHJcbiAgICBfYWRkRGF0YVRvQ2FyZCgpIHtcclxuICAgICAgICB0aGlzLnRpdGxlID0gdGhpcy5fY2FyZEVsZW1lbnQucXVlcnlTZWxlY3RvcihcIi5lbGVtZW50X19pbWFnZS10aXRsZVwiKTtcclxuICAgICAgICB0aGlzLmltYWdlID0gdGhpcy5fY2FyZEVsZW1lbnQucXVlcnlTZWxlY3RvcihcIi5lbGVtZW50X19pbWFnZVwiKTtcclxuICAgICAgICB0aGlzLmxpa2VzQ291bnQgPSB0aGlzLl9jYXJkRWxlbWVudC5xdWVyeVNlbGVjdG9yKFwiLmVsZW1lbnRfX2xpa2VzLWNvdW50XCIpO1xyXG4gICAgICAgIGlmICh0aGlzLl9saWtlcyA9PT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX2xpa2VzID0gW107XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMubGlrZXNDb3VudC50ZXh0Q29udGVudCA9IHRoaXMuX2xpa2VzLmxlbmd0aDtcclxuICAgICAgICB0aGlzLnRpdGxlLnRleHRDb250ZW50ID0gdGhpcy5fdGl0bGU7XHJcbiAgICAgICAgdGhpcy5pbWFnZS5zcmMgPSB0aGlzLl9pbWFnZVVybDtcclxuICAgICAgICB0aGlzLmltYWdlLmFsdCA9IHRoaXMuX3RpdGxlO1xyXG4gICAgfVxyXG4gICAgZGVsZXRlQ2FyZCgpIHtcclxuICAgICAgICB0aGlzLl9jYXJkRWxlbWVudC5yZW1vdmUoKTsgLy90aGlzLl9jYXJkRWxlbWVudD1udWxsOyBkb2VzIG5vdCB3b3JrXHJcbiAgICAgICAgdGhpcy5fY2FyZEVsZW1lbnQgPSBudWxsO1xyXG4gICAgfVxyXG4gICAgX2RvSUxpa2UoaWRPZkxpa2VyKSB7XHJcbiAgICAgICAgcmV0dXJuIGlkT2ZMaWtlci5faWQgPT09IHRoaXMuX215SUQ7XHJcbiAgICB9XHJcbiAgICBfYWRkRXZlbnRMaXN0ZW5lcnMoY2FuRGVsZXRlKSB7XHJcbiAgICAgICAgY29uc3QgZGVsZXRlQnRuID0gdGhpcy5fY2FyZEVsZW1lbnQucXVlcnlTZWxlY3RvcihcIi5lbGVtZW50X19kZWxldGUtYnRuXCIpXHJcbiAgICAgICAgaWYgKGNhbkRlbGV0ZSkge1xyXG4gICAgICAgICAgICBkZWxldGVCdG4uY2xhc3NMaXN0LnJlbW92ZShcImhpZGVcIik7XHJcbiAgICAgICAgICAgIGRlbGV0ZUJ0bi5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fY29uZmlybURlbGV0ZSh0aGlzLl9jYXJkSUQpO1xyXG5cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgZGVsZXRlQnRuLmNsYXNzTGlzdC5hZGQoXCJoaWRlXCIpO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLmxpa2VCdG4gPSB0aGlzLl9jYXJkRWxlbWVudC5xdWVyeVNlbGVjdG9yKFwiLmVsZW1lbnRfX2xpa2UtdG9nZ2xlXCIpO1xyXG4gICAgICAgIHRoaXMuaXNMaWtlZEJ5TWUgPSB0aGlzLl9saWtlcy5maW5kKHRoaXMuX2RvSUxpa2UpO1xyXG4gICAgICAgIHRoaXMuX3NldExpa2VJY29uKCk7XHJcbiAgICAgICAgdGhpcy5saWtlQnRuLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCAoKSA9PiB7XHJcbiAgICAgICAgICAgIHRoaXMuaXNMaWtlZEJ5TWUgPSAhdGhpcy5pc0xpa2VkQnlNZTtcclxuICAgICAgICAgICAgaWYgKHRoaXMuaXNMaWtlZEJ5TWUpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMubGlrZXNDb3VudC50ZXh0Q29udGVudCA9IE51bWJlcih0aGlzLmxpa2VzQ291bnQudGV4dENvbnRlbnQpICsgMTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHRoaXMubGlrZXNDb3VudC50ZXh0Q29udGVudCA9IE51bWJlcih0aGlzLmxpa2VzQ291bnQudGV4dENvbnRlbnQpIC0gMTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB0aGlzLl90b2dnbGVNeUxpa2VUbyh0aGlzLl9jYXJkSUQsIHRoaXMuaXNMaWtlZEJ5TWUpO1xyXG4gICAgICAgICAgICB0aGlzLl9zZXRMaWtlSWNvbigpO1xyXG4gICAgICAgIH0pXHJcbiAgICAgICAgdGhpcy5pbWFnZS5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgKCkgPT4ge1xyXG4gICAgICAgICAgICB0aGlzLl9oYW5kbGVDYXJkQ2xpY2soe1xyXG4gICAgICAgICAgICAgICAgbGluazogdGhpcy5faW1hZ2VVcmwsXHJcbiAgICAgICAgICAgICAgICBuYW1lOiB0aGlzLl90aXRsZVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuICAgIF9zZXRMaWtlSWNvbigpIHtcclxuICAgICAgICBpZiAodGhpcy5pc0xpa2VkQnlNZSkge1xyXG4gICAgICAgICAgICB0aGlzLmxpa2VCdG4uY2xhc3NMaXN0LmFkZChcImVsZW1lbnRfX2xpa2UtdG9nZ2xlLWFjdGl2ZVwiKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICB0aGlzLmxpa2VCdG4uY2xhc3NMaXN0LnJlbW92ZShcImVsZW1lbnRfX2xpa2UtdG9nZ2xlLWFjdGl2ZVwiKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBnZW5lcmF0ZUNhcmQoY2FuRGVsZXRlLCBteUlEKSB7XHJcbiAgICAgICAgdGhpcy5fbXlJRCA9IG15SUQ7XHJcbiAgICAgICAgdGhpcy5fZ2V0VGVtcGxhdGUoKTtcclxuICAgICAgICB0aGlzLl9hZGREYXRhVG9DYXJkKCk7XHJcbiAgICAgICAgdGhpcy5fYWRkRXZlbnRMaXN0ZW5lcnMoY2FuRGVsZXRlKTtcclxuXHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2NhcmRFbGVtZW50O1xyXG4gICAgfVxyXG59XHJcblxyXG5leHBvcnQgZGVmYXVsdCBDYXJkOyIsIi8vY2xhc3MgRm9ybVZhbGlkYXRvciB3aXRoIEV4cG9ydFxyXG5jbGFzcyBGb3JtVmFsaWRhdG9yIHtcclxuICAgIGNvbnN0cnVjdG9yKHNldHRpbmdzLCBmb3JtRWxlbWVudCkge1xyXG4gICAgICAgIHRoaXMuc2V0dGluZ3MgPSBzZXR0aW5nczsgLy9zZWxlY3RvcnMgYW5kIGZvcm0gY2xhc3Nlc1xyXG4gICAgICAgIHRoaXMuZm9ybUVsZW1lbnQgPSBmb3JtRWxlbWVudDsgLy9mb3JtIGVsZW1lbnQgdG8gYmUgdmFsaWRhdGVkXHJcbiAgICB9XHJcbiAgICBfaGlkZUlucHV0RXJyb3IoaW5wdXQpIHtcclxuICAgICAgICBjb25zdCBlcnJvckVsZW1lbnQgPSB0aGlzLmZvcm1FbGVtZW50LnF1ZXJ5U2VsZWN0b3IoXCIjXCIgKyBpbnB1dC5pZCArIFwiLWVycm9yXCIpO1xyXG4gICAgICAgIGVycm9yRWxlbWVudC50ZXh0Q29udGVudCA9IFwiXCI7XHJcbiAgICAgICAgZXJyb3JFbGVtZW50LmNsYXNzTGlzdC5yZW1vdmUodGhpcy5zZXR0aW5ncy5lcnJvckNsYXNzKTtcclxuICAgICAgICBpbnB1dC5jbGFzc0xpc3QucmVtb3ZlKHRoaXMuc2V0dGluZ3MuaW5wdXRFcnJvckNsYXNzKTtcclxuICAgIH1cclxuICAgIF9zaG93SW5wdXRFcnJvcihpbnB1dCkge1xyXG4gICAgICAgIGNvbnN0IGVycm9yRWxlbWVudCA9IHRoaXMuZm9ybUVsZW1lbnQucXVlcnlTZWxlY3RvcihcIiNcIiArIGlucHV0LmlkICsgXCItZXJyb3JcIik7XHJcbiAgICAgICAgZXJyb3JFbGVtZW50LnRleHRDb250ZW50ID0gaW5wdXQudmFsaWRhdGlvbk1lc3NhZ2U7XHJcbiAgICAgICAgZXJyb3JFbGVtZW50LmNsYXNzTGlzdC5hZGQodGhpcy5zZXR0aW5ncy5lcnJvckNsYXNzKTtcclxuICAgICAgICBpbnB1dC5jbGFzc0xpc3QuYWRkKHRoaXMuc2V0dGluZ3MuaW5wdXRFcnJvckNsYXNzKTtcclxuICAgIH1cclxuXHJcbiAgICBfY2hlY2tJbnB1dFZhbGlkaXR5KGlucHV0KSB7XHJcbiAgICAgICAgaWYgKGlucHV0LnZhbGlkaXR5LnZhbGlkKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX2hpZGVJbnB1dEVycm9yKGlucHV0KTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICB0aGlzLl9zaG93SW5wdXRFcnJvcihpbnB1dCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgIH1cclxuICAgIF9oYXNJbnZhbGlkSW5wdXQoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuaW5wdXRMaXN0LnNvbWUoKGlucHV0RWxlbWVudCkgPT4geyByZXR1cm4gIWlucHV0RWxlbWVudC52YWxpZGl0eS52YWxpZCB9KVxyXG4gICAgfVxyXG5cclxuICAgIF90b2dnbGVCdXR0b25TdGF0ZSgpIHtcclxuICAgICAgICBpZiAodGhpcy5faGFzSW52YWxpZElucHV0KCkpIHtcclxuICAgICAgICAgICAgdGhpcy5idXR0b24uY2xhc3NMaXN0LmFkZCh0aGlzLnNldHRpbmdzLmluYWN0aXZlQnV0dG9uQ2xhc3MpXHJcbiAgICAgICAgICAgIHRoaXMuYnV0dG9uLmRpc2FibGVkID0gdHJ1ZTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICB0aGlzLmJ1dHRvbi5jbGFzc0xpc3QucmVtb3ZlKHRoaXMuc2V0dGluZ3MuaW5hY3RpdmVCdXR0b25DbGFzcylcclxuICAgICAgICAgICAgdGhpcy5idXR0b24uZGlzYWJsZWQgPSBmYWxzZTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBfc2V0RXZlbnRMaXN0bmVycygpIHtcclxuICAgICAgICB0aGlzLmlucHV0TGlzdCA9IFsuLi50aGlzLmZvcm1FbGVtZW50LnF1ZXJ5U2VsZWN0b3JBbGwodGhpcy5zZXR0aW5ncy5pbnB1dFNlbGVjdG9yKV07XHJcbiAgICAgICAgdGhpcy5idXR0b24gPSB0aGlzLmZvcm1FbGVtZW50LnF1ZXJ5U2VsZWN0b3IodGhpcy5zZXR0aW5ncy5zdWJtaXRCdXR0b25TZWxlY3Rvcik7XHJcbiAgICAgICAgdGhpcy5pbnB1dExpc3QuZm9yRWFjaCgoaW5wdXQpID0+IHtcclxuICAgICAgICAgICAgaW5wdXQuYWRkRXZlbnRMaXN0ZW5lcihcImlucHV0XCIsICgpID0+IHtcclxuICAgICAgICAgICAgICAgIHRoaXMuX2NoZWNrSW5wdXRWYWxpZGl0eShpbnB1dCk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl90b2dnbGVCdXR0b25TdGF0ZSgpO1xyXG4gICAgICAgICAgICB9KVxyXG5cclxuICAgICAgICB9KTtcclxuICAgICAgICB0aGlzLl90b2dnbGVCdXR0b25TdGF0ZSgpO1xyXG4gICAgfVxyXG4gICAgZW5hYmxlVmFsaWRhdGlvbigpIHtcclxuICAgICAgICB0aGlzLmZvcm1FbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJzdWJtaXRcIiwgKGUpID0+IGUucHJldmVudERlZmF1bHQoKSk7XHJcbiAgICAgICAgdGhpcy5fc2V0RXZlbnRMaXN0bmVycygpO1xyXG5cclxuICAgIH1cclxuICAgIHJlc2V0VmFsaWRhdGlvbigpIHtcclxuICAgICAgICB0aGlzLmlucHV0TGlzdC5mb3JFYWNoKChpbnB1dCkgPT4ge1xyXG4gICAgICAgICAgICB0aGlzLl9oaWRlSW5wdXRFcnJvcihpbnB1dCkgLy9jbGVhcmluZyBlcnJvcnMgZXZlbiBpZiB1c2VyIGFjY2lkZW50bHkgbGVhdmVzIHRoZSBmb3JtIHdpdGggZXJyb3JzIG9uIGl0ISAgICAgICAgICAgIFxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHRoaXMuX3RvZ2dsZUJ1dHRvblN0YXRlKCk7IC8vIGNvbnRyb2xsaW5nIHRoZSBzdWJtaXQgYnV0dG9uIFxyXG4gICAgfVxyXG59XHJcbmV4cG9ydCBkZWZhdWx0IEZvcm1WYWxpZGF0b3I7IiwiZXhwb3J0IGNvbnN0IGRlZmF1bHRGb3JtQ29uZmlnID0ge1xyXG4gICAgZm9ybVNlbGVjdG9yOiBcIi5wb3B1cF9fZm9ybVwiLFxyXG4gICAgaW5wdXRTZWxlY3RvcjogXCIucG9wdXBfX2lucHV0XCIsXHJcbiAgICBzdWJtaXRCdXR0b25TZWxlY3RvcjogXCIucG9wdXBfX2J1dHRvblwiLFxyXG4gICAgaW5hY3RpdmVCdXR0b25DbGFzczogXCJwb3B1cF9fYnV0dG9uX2Rpc2FibGVkXCIsXHJcbiAgICBpbnB1dEVycm9yQ2xhc3M6IFwicG9wdXBfX2lucHV0X3R5cGVfZXJyb3JcIixcclxuICAgIGVycm9yQ2xhc3M6IFwicG9wdXBfX2Vycm9yX3Zpc2libGVcIlxyXG59O1xyXG5cclxuZXhwb3J0IGNvbnN0IHBvcHVwQ29uZmlnID0ge1xyXG4gICAgaW1hZ2VNb2RhbFdpbmRvdzogXCIucG9wdXAtaW1hZ2VcIixcclxuICAgIGVkaXRGb3JtTW9kYWxXaW5kb3c6IFwiLnBvcHVwLXByb2ZpbGUtZm9ybVwiLFxyXG4gICAgY2FyZEZvcm1Nb2RhbFdpbmRvdzogXCIucG9wdXAtcGxhY2UtZm9ybVwiLFxyXG4gICAgZGVsZXRlQ29uZmlybWF0aW9uV2luZG93OiBcIi5wb3B1cC1kZWxldGUtY29uZmlybWF0aW9uXCIsXHJcbiAgICBjaGFuZ2VBdmF0YXJNb2RhbFdpbmRvdzogXCIucG9wdXAtYXZhdGFyLWZvcm1cIlxyXG59O1xyXG5cclxuZXhwb3J0IGNvbnN0IHByb2ZpbGVDb25maWcgPSB7XHJcbiAgICBwcm9maWxlVGl0bGU6IFwiLnByb2ZpbGVfX25hbWVcIixcclxuICAgIHByb2ZpbGVEZXNjcmlwdGlvbjogXCIucHJvZmlsZV9fam9iXCIsXHJcbiAgICBwcm9maWxlQXZhdGFySW1hZ2U6IFwiLnByb2ZpbGVfX2F2YXRhclwiXHJcbn07XHJcblxyXG5leHBvcnQgY29uc3QgY2FyZHNDb25maWcgPSB7XHJcbiAgICBjYXJkU2VsZWN0b3I6IFwiI2VsZW1lbnRcIiwgLy9DYXJkLiB0ZW1wbGF0ZVNlbGVjdG9yICBcclxuICAgIHBsYWNlc3dyYXA6IFwiLmVsZW1lbnRzXCIsIC8vU2VjdGlvbi5jb250YWluZXJTZWxlY3RvclxyXG59O1xyXG5leHBvcnQgY29uc3Qgc3VibWl0QnV0dG9uQ29uZmlnID0ge1xyXG4gICAgcHJvZmlsZTogXCIuZWRpdC1wcm9maWxlLWZvcm1fX3NhdmVcIixcclxuICAgIGF2YXRhcjogXCIudXBkYXRlLWF2YXRhci1mb3JtX19zYXZlXCIsXHJcbiAgICBjYXJkOiBcIi5hZGQtcGxhY2UtZm9ybV9fc2F2ZVwiXHJcbn0iLCJjbGFzcyBQb3B1cCB7XHJcbiAgICBjb25zdHJ1Y3Rvcihwb3B1cFNlbGVjdG9yKSB7XHJcbiAgICAgICAgdGhpcy5wb3B1cEVsZW1lbnQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKHBvcHVwU2VsZWN0b3IpO1xyXG4gICAgICAgIHRoaXMuX2hhbmRsZUVzY1VwID0gdGhpcy5faGFuZGxlRXNjVXAuYmluZCh0aGlzKTtcclxuICAgICAgICB0aGlzLmNsb3NlID0gdGhpcy5jbG9zZS5iaW5kKHRoaXMpO1xyXG4gICAgICAgIHRoaXMub3BlbiA9IHRoaXMub3Blbi5iaW5kKHRoaXMpO1xyXG4gICAgfVxyXG5cclxuICAgIF9oYW5kbGVFc2NVcChldnQpIHtcclxuICAgICAgICAvL3ByZXZlbnQgZGVmYXVsdCBhbmQgaWYgYnV0dG9uIHdhcyBFc2MgY2FsbCBjbG9zZSBtZXRob2RcclxuICAgICAgICBldnQucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICBpZiAoZXZ0LmtleSA9PT0gJ0VzY2FwZScpIHtcclxuICAgICAgICAgICAgdGhpcy5jbG9zZSgpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBzZXRFdmVudExpc3RlbmVycygpIHtcclxuICAgICAgICAvL2NyZWF0ZSBhbiBldmVudCBsaXN0ZW5lciBmb3IgY2xpY2sgb24gY2xvc2UgYnV0dG9uIG9yIHNlbWl0cmFuc3BhcmVudCBiYWNrZ3JvdW5kXHJcbiAgICAgICAgdGhpcy5wb3B1cEVsZW1lbnQucXVlcnlTZWxlY3RvcignLmNhbmNlbCcpLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgdGhpcy5jbG9zZSk7IC8vY2xvc2UgYnV0dG9uXHJcbiAgICAgICAgLy9zdWdnZXN0aW9uIG9mIG1vdXNlZG93biB1c2VkLiBldmVudExpc3RlbmVycyB1c2luZyBhcnJvdyBmdW5jdGlvbnMgY2FuJ3QgYmUgcmVtb3ZlZCxcclxuICAgICAgICAvLyBhbmQgaWYgSSBkb24ndCB1c2UgYW4gYXJyb3cgZnVuY3Rpb24gSSBkb24ndCBoYXZlIGFjY2VzcyB0byBib3RoIGV2dC50YXJnZXQgYW5kIHRoaXMucG9wdXBFbGVtZW50XHJcbiAgICAgICAgLy8gc28gaWYgSSBjYW4ndCByZW1vdmUgaXQgaW4gY2xvc2UsIEknbSBub3QgZ29pbmcgdG8gY3JlYXRlIGEgbmV3IG9uIHdpdGggZWFjaCBvcGVuITkwLS84NDcyNDI1NDUxMTMyICAgICAgICBcclxuICAgICAgICB0aGlzLnBvcHVwRWxlbWVudC5hZGRFdmVudExpc3RlbmVyKCdtb3VzZWRvd24nLCAoZXZ0KSA9PiB7XHJcbiAgICAgICAgICAgIGlmIChldnQudGFyZ2V0ID09PSB0aGlzLnBvcHVwRWxlbWVudCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5jbG9zZSgpOyAvL3BvcHVwIHNlbWl0cmFuc3BhcmVudCBiYWNrZ3JvdW5kXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgIH1cclxuICAgIF9oYW5kbGVPdmVybGF5Q2xpY2soZXZ0KSB7XHJcbiAgICAgICAgaWYgKGV2dC50YXJnZXQgPT09IHRoaXMucG9wdXBFbGVtZW50KSB7XHJcbiAgICAgICAgICAgIHRoaXMuY2xvc2UoKTsgLy9wb3B1cCBzZW1pdHJhbnNwYXJlbnQgYmFja2dyb3VuZFxyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIG9wZW4oKSB7XHJcbiAgICAgICAgLy9hZGQgYSBuZXcgY2xhc3MgYW5kIGNyZWF0ZXMgYW4gZXZlbnRsaXN0ZW5lciBmb3IgRXNjIGtleXVwXHJcbiAgICAgICAgdGhpcy5wb3B1cEVsZW1lbnQuY2xhc3NMaXN0LmFkZCgncG9wdXBfb3BlbmVkJyk7XHJcbiAgICAgICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcigna2V5dXAnLCB0aGlzLl9oYW5kbGVFc2NVcCk7XHJcblxyXG4gICAgfVxyXG5cclxuICAgIGNsb3NlKCkge1xyXG4gICAgICAgIC8vcmVtb3ZlcyB0aGUgY2xhc3Mgd2UgYWRkZWQgYW5kIHRoZSBldmVudGxpc3RlbmVyIGZvciB0aGUgRXNjIGtleXVwXHJcbiAgICAgICAgdGhpcy5wb3B1cEVsZW1lbnQuY2xhc3NMaXN0LnJlbW92ZSgncG9wdXBfb3BlbmVkJyk7XHJcbiAgICAgICAgZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcigna2V5dXAnLCB0aGlzLl9oYW5kbGVFc2NVcCk7XHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IFBvcHVwOyIsImltcG9ydCBQb3B1cCBmcm9tIFwiLi9Qb3B1cFwiO1xyXG5cclxuY2xhc3MgUG9wdXBXaXRoRm9ybSBleHRlbmRzIFBvcHVwIHtcclxuICAgIGNvbnN0cnVjdG9yKHsgcG9wdXBTZWxlY3RvciwgaGFuZGxlRm9ybVN1Ym1pdCB9KSB7XHJcbiAgICAgICAgc3VwZXIocG9wdXBTZWxlY3Rvcik7IC8vdGhpcy5wb3B1cEVsZW1lbnRcclxuICAgICAgICB0aGlzLl9oYW5kbGVGb3JtU3VibWl0ID0gaGFuZGxlRm9ybVN1Ym1pdDtcclxuICAgICAgICB0aGlzLl9mb3JtID0gdGhpcy5wb3B1cEVsZW1lbnQucXVlcnlTZWxlY3RvcignLnBvcHVwX19mb3JtJyk7XHJcbiAgICAgICAgdGhpcy5fc3VibWl0QnRuID0gdGhpcy5fZm9ybS5xdWVyeVNlbGVjdG9yKCcucG9wdXBfX2J1dHRvbicpO1xyXG5cclxuICAgIH1cclxuICAgIF9nZXRJbnB1dFZhbHVlcygpIHtcclxuICAgICAgICBjb25zdCBpbnB1dHMgPSBbLi4udGhpcy5fZm9ybS5xdWVyeVNlbGVjdG9yQWxsKCcucG9wdXBfX2lucHV0JyldO1xyXG4gICAgICAgIGNvbnN0IGlucHV0VmFsdWVzID0ge307XHJcblxyXG4gICAgICAgIGlucHV0cy5mb3JFYWNoKChpbnB1dCkgPT4ge1xyXG4gICAgICAgICAgICBpbnB1dFZhbHVlc1tpbnB1dC5uYW1lXSA9IGlucHV0LnZhbHVlO1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICByZXR1cm4gaW5wdXRWYWx1ZXM7XHJcbiAgICB9XHJcbiAgICBjaGFuZ2VTdWJtaXRCdG5UZXh0KG1zZyA9IFwic2F2aW5nXCIpIHtcclxuICAgICAgICB0aGlzLl9zdWJtaXRCdG4udGV4dENvbnRlbnQgPSBtc2c7XHJcbiAgICB9XHJcbiAgICBfZm9ybVN1Ym1pdCgpIHtcclxuICAgICAgICB0aGlzLl9oYW5kbGVGb3JtU3VibWl0KHRoaXMuX2dldElucHV0VmFsdWVzKCkpO1xyXG4gICAgfVxyXG4gICAgc2V0RXZlbnRMaXN0ZW5lcnMoKSB7XHJcbiAgICAgICAgc3VwZXIuc2V0RXZlbnRMaXN0ZW5lcnMoKTtcclxuXHJcbiAgICAgICAgdGhpcy5fZm9ybS5hZGRFdmVudExpc3RlbmVyKCdzdWJtaXQnLCAoZXZ0KSA9PiB0aGlzLl9mb3JtU3VibWl0KGV2dCkpO1xyXG4gICAgfVxyXG4gICAgY2xvc2UgPSAoKSA9PiB7IC8vYXJyb3cgZnVuY3Rpb24gbWV0aG9kLCByZXRhaW5zIGNvbnRleHQgd2l0aG91dCBuZWVkIGZvciAuYmluZCh0aGlzKVxyXG5cclxuICAgICAgICB0aGlzLl9mb3JtLnJlc2V0KCk7XHJcbiAgICAgICAgc3VwZXIuY2xvc2UoKTtcclxuICAgIH1cclxuXHJcbiAgICBwcmVmaWxsRm9ybShpbnB1dFZhbHVlcykge1xyXG4gICAgICAgIGNvbnN0IGlucHV0cyA9IFsuLi50aGlzLl9mb3JtLnF1ZXJ5U2VsZWN0b3JBbGwoJy5wb3B1cF9faW5wdXQnKV07XHJcbiAgICAgICAgaW5wdXRzLmZvckVhY2goKGlucHV0KSA9PiB7XHJcbiAgICAgICAgICAgIGlucHV0LnZhbHVlID0gaW5wdXRWYWx1ZXNbaW5wdXQubmFtZV07XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IFBvcHVwV2l0aEZvcm07IiwiY2xhc3MgQVBJIHtcclxuICAgIGNvbnN0cnVjdG9yKHsgYmFzZVVSTCwgaGVhZGVycyB9KSB7XHJcbiAgICAgICAgdGhpcy5iYXNlVVJMID0gYmFzZVVSTDtcclxuICAgICAgICB0aGlzLmhlYWRlcnMgPSBoZWFkZXJzO1xyXG4gICAgfVxyXG4gICAgX2N1c3RvbUZldGNoKHVybCwgbWV0aG9kID0gXCJHRVRcIikgeyAvL3VzZWQgaW50ZXJuYWxseVxyXG4gICAgICAgIHJldHVybiBmZXRjaCh1cmwsIHtcclxuICAgICAgICAgICAgICAgIG1ldGhvZDogbWV0aG9kLFxyXG4gICAgICAgICAgICAgICAgaGVhZGVyczogdGhpcy5oZWFkZXJzXHJcbiAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgIC50aGVuKHJlcyA9PiByZXMub2sgPyByZXMuanNvbigpIDogUHJvbWlzZS5yZWplY3QocmVzLnN0YXR1c1RleHQpKVxyXG4gICAgICAgICAgICAuY2F0Y2goKGVycikgPT4ge1xyXG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coZXJyKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICB9XHJcbiAgICBnZXRJbml0aWFsQ2FyZHMoKSB7IC8vaW5kZXguanMgbGluZSA2NlxyXG4gICAgICAgIHJldHVybiB0aGlzLl9jdXN0b21GZXRjaChgJHt0aGlzLmJhc2VVUkx9L2NhcmRzYCk7XHJcbiAgICB9XHJcbiAgICBnZXRVc2VySW5mbygpIHsgLy9pbmRleC5qcyBMaW5lIDY2IGFuZCAxODZcclxuICAgICAgICByZXR1cm4gdGhpcy5fY3VzdG9tRmV0Y2goYCR7dGhpcy5iYXNlVVJMfS91c2Vycy9tZWApO1xyXG4gICAgfVxyXG5cclxuICAgIGVkaXRQcm9maWxlKHsgdXNlck5hbWUsIGFib3V0IH0pIHsgLy9pbmRleC5qcyBMaW5lIDkxXHJcbiAgICAgICAgcmV0dXJuIGZldGNoKGAke3RoaXMuYmFzZVVSTH0vdXNlcnMvbWVgLCB7XHJcbiAgICAgICAgICAgIG1ldGhvZDogXCJQQVRDSFwiLFxyXG4gICAgICAgICAgICBoZWFkZXJzOiB0aGlzLmhlYWRlcnMsXHJcbiAgICAgICAgICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KHtcclxuICAgICAgICAgICAgICAgIG5hbWU6IHVzZXJOYW1lLFxyXG4gICAgICAgICAgICAgICAgYWJvdXQ6IGFib3V0XHJcbiAgICAgICAgICAgIH0pXHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbiAgICBhZGRDYXJkKHsgbmFtZSwgbGluayB9KSB7IC8vaW5kZXguanMgTGluZSAxMzZcclxuICAgICAgICByZXR1cm4gZmV0Y2goYCR7dGhpcy5iYXNlVVJMfS9jYXJkc2AsIHtcclxuICAgICAgICAgICAgbWV0aG9kOiBcIlBPU1RcIixcclxuICAgICAgICAgICAgaGVhZGVyczogdGhpcy5oZWFkZXJzLFxyXG4gICAgICAgICAgICBib2R5OiBKU09OLnN0cmluZ2lmeSh7XHJcbiAgICAgICAgICAgICAgICBuYW1lOiBuYW1lLFxyXG4gICAgICAgICAgICAgICAgbGluazogbGlua1xyXG4gICAgICAgICAgICB9KVxyXG5cclxuICAgICAgICB9KTtcclxuICAgIH1cclxuICAgIGRlbGV0ZUNhcmQoY2FyZElEKSB7IC8vaW5kZXguanMgTGluZSAxMDlcclxuICAgICAgICByZXR1cm4gdGhpcy5fY3VzdG9tRmV0Y2goYCR7dGhpcy5iYXNlVVJMfS9jYXJkcy8ke2NhcmRJRH1gLCBcIkRFTEVURVwiKTtcclxuICAgIH1cclxuXHJcbiAgICAvKk5vdCB1c2VkIHlldCovXHJcbiAgICBnZXRMaWtlc0NvdW50KGNhcmRJRCkge1xyXG4gICAgICAgICAgICByZXR1cm4gZmV0Y2goYCR7dGhpcy5iYXNlVVJMfS9jYXJkcyR7Y2FyZElEfWAsIHtcclxuICAgICAgICAgICAgICAgICAgICBoZWFkZXJzOiB0aGlzLmhlYWRlcnNcclxuICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgICAgICAudGhlbihyZXMgPT4gcmVzLmpzb24oKSlcclxuICAgICAgICAgICAgICAgIC50aGVuKChyZXN1bHQpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0Lmxpa2VzLmxlbmd0aDtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvKk5vdCB1c2VkIHlldCovXHJcbiAgICBpc015Q2FyZChjYXJkSUQpIHtcclxuICAgICAgICByZXR1cm4gZmV0Y2goYCR7dGhpcy5iYXNlVVJMfS9jYXJkcy8ke2NhcmRJRH1gLCB7XHJcbiAgICAgICAgICAgICAgICBoZWFkZXJzOiB0aGlzLmhlYWRlcnNcclxuICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgLnRoZW4ocmVzID0+IHJlcy5qc29uKCkpXHJcbiAgICAgICAgICAgIC50aGVuKChyZXN1bHQpID0+IHtcclxuICAgICAgICAgICAgICAgIGlmIChyZXN1bHQub3duZXIuX2lkID09PSB0aGlzLmF1dGhvcmlzYXRpb24pIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICBsaWtlQ2FyZChjYXJkSUQpIHsgLy9pbmRleC5qcyBMaW5lIDQ4XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2N1c3RvbUZldGNoKGAke3RoaXMuYmFzZVVSTH0vY2FyZHMvbGlrZXMvJHtjYXJkSUR9YCwgXCJQVVRcIik7XHJcbiAgICB9XHJcbiAgICB1bmxpa2VDYXJkKGNhcmRJRCkgeyAvL2luZGV4LmpzIExpbmUgNTBcclxuICAgICAgICByZXR1cm4gdGhpcy5fY3VzdG9tRmV0Y2goYCR7dGhpcy5iYXNlVVJMfS9jYXJkcy9saWtlcy8ke2NhcmRJRH1gLCBcIkRFTEVURVwiKTtcclxuICAgIH1cclxuICAgIHVwZGF0ZUF2YXRhcih7IGxpbmsgfSkge1xyXG4gICAgICAgIGNvbnNvbGUubG9nKFwibGlua1wiLCBsaW5rKTtcclxuICAgICAgICByZXR1cm4gZmV0Y2goYCR7dGhpcy5iYXNlVVJMfS91c2Vycy9tZS9hdmF0YXJgLCB7XHJcbiAgICAgICAgICAgICAgICBtZXRob2Q6IFwiUEFUQ0hcIixcclxuICAgICAgICAgICAgICAgIGhlYWRlcnM6IHRoaXMuaGVhZGVycyxcclxuICAgICAgICAgICAgICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KHtcclxuICAgICAgICAgICAgICAgICAgICBhdmF0YXI6IGxpbmtcclxuICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgIC50aGVuKHJlcyA9PiByZXMub2sgPyByZXMuanNvbigpIDogUHJvbWlzZS5yZWplY3QocmVzLnN0YXR1c1RleHQpKVxyXG4gICAgICAgICAgICAuY2F0Y2goKGVycikgPT4ge1xyXG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coZXJyKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG5cclxufVxyXG5leHBvcnQgY29uc3QgYXBpID0gbmV3IEFQSSh7XHJcbiAgICBiYXNlVVJMOiBcImh0dHBzOi8vYXJvdW5kLm5vbW9yZXBhcnRpZXMuY28vdjEvZ3JvdXAtMTJcIixcclxuICAgIGhlYWRlcnM6IHtcclxuICAgICAgICBhdXRob3JpemF0aW9uOiBcIjA3N2UwMmY1LTQ2OWMtNDkyNS1hMTEwLWU3ZGFhYzlmNmVhZFwiLFxyXG4gICAgICAgIFwiQ29udGVudC1UeXBlXCI6IFwiYXBwbGljYXRpb24vanNvblwiXHJcbiAgICB9XHJcbn0pOyIsImltcG9ydCBcIi4vaW5kZXguY3NzXCI7XHJcbi8qaW1wb3J0IGF2YXRhciBmcm9tIFwiLi4vaW1hZ2VzL2F2YXRhci5qcGdcIjtcclxuY29uc3QgYXZhdGFyUHJvZmlsZSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwicHJvZmlsZV9fYXZhdGFyXCIpO1xyXG5hdmF0YXJQcm9maWxlLnN0eWxlLmJhY2tncm91bmRJbWFnZSA9IGB1cmwoJHthdmF0YXJ9KWA7Ki9cclxuLy9pbXBvcnQgYW5kIGltcGxlbWVudCBjbGFzc2VzIGZyb20gQ2FyZCBhbmQgRm9ybVZhbGlkYXRvciBcclxuLy9hbmQgaW1wbGVtZW50IGZ1bmN0aW9ucyBpbiB1dGlscywgdXNpbmcgcHJlc2V0IGNhcmRzXHJcblxyXG4vLy0tXHJcbi8vaW1wb3J0IHN0YXRlbWVudHNcclxuLy8tLVxyXG5pbXBvcnQgQ2FyZCBmcm9tIFwiLi4vY29tcG9uZW50cy9DYXJkXCI7XHJcbmltcG9ydCBGb3JtVmFsaWRhdG9yIGZyb20gXCIuLi9jb21wb25lbnRzL0Zvcm1WYWxpZGF0b3JcIjtcclxuaW1wb3J0IHsgZGVmYXVsdEZvcm1Db25maWcsIHBvcHVwQ29uZmlnLCBwcm9maWxlQ29uZmlnLCBjYXJkc0NvbmZpZyB9IGZyb20gXCIuLi91dGlscy9jb25zdGFudHNcIjtcclxuaW1wb3J0IFBvcHVwV2l0aEZvcm0gZnJvbSBcIi4uL2NvbXBvbmVudHMvUG9wdXBXaXRoRm9ybVwiO1xyXG5pbXBvcnQgUG9wdXBXaXRoSW1hZ2UgZnJvbSBcIi4uL2NvbXBvbmVudHMvUG9wdXBXaXRoSW1hZ2VcIjtcclxuaW1wb3J0IFNlY3Rpb24gZnJvbSBcIi4uL2NvbXBvbmVudHMvU2VjdGlvblwiO1xyXG5pbXBvcnQgVXNlckluZm8gZnJvbSBcIi4uL2NvbXBvbmVudHMvVXNlckluZm9cIjtcclxuaW1wb3J0IHsgYXBpIH0gZnJvbSBcIi4uL2NvbXBvbmVudHMvQXBpXCI7XHJcbmltcG9ydCBQb3B1cFdpdGhDb25maXJtYXRpb24gZnJvbSBcIi4uL2NvbXBvbmVudHMvUG9wdXBXaXRoQ29uZmlybWF0aW9uXCI7XHJcblxyXG5cclxuLy8tLVxyXG4vL1Byb2ZpbGUgU2V0dXBcclxuLy8tLVxyXG5cclxuY29uc3QgdXNlckluZm8gPSBuZXcgVXNlckluZm8oe1xyXG4gICAgbmFtZVNlbGVjdG9yOiBwcm9maWxlQ29uZmlnLnByb2ZpbGVUaXRsZSxcclxuICAgIGpvYlNlbGVjdG9yOiBwcm9maWxlQ29uZmlnLnByb2ZpbGVEZXNjcmlwdGlvbixcclxuICAgIGF2YXRhclNlbGVjdG9yOiBwcm9maWxlQ29uZmlnLnByb2ZpbGVBdmF0YXJJbWFnZVxyXG59KTtcclxuXHJcbi8vLS1cclxuLy9DYXJkcyBTZXR1cFxyXG4vLy0tXHJcblxyXG5cclxuY29uc3QgcmVuZGVyQ2FyZCA9IChkYXRhKSA9PiB7XHJcbiAgICBsZXQgY2FuRGVsZXRlID0gKChkYXRhLm93bmVyLl9pZCA9PT0gbXlJRCkgPyB0cnVlIDogZmFsc2UpO1xyXG4gICAgY29uc3QgY2FyZCA9IG5ldyBDYXJkKHtcclxuICAgICAgICBkYXRhLFxyXG4gICAgICAgIGhhbmRsZUNhcmRDbGljazogKCkgPT4ge1xyXG4gICAgICAgICAgICBvcGVuSW1hZ2VQb3B1cChkYXRhKTtcclxuICAgICAgICB9LFxyXG4gICAgICAgIGNvbmZpcm1EZWxldGU6IChjYXJkSUQpID0+IHtcclxuICAgICAgICAgICAgb3BlbkRlbGV0ZUNvbmZpcm1hdGlvblBvcHVwKGNhcmRJRClcclxuICAgICAgICB9LFxyXG4gICAgICAgIHRvZ2dsZU15TGlrZVRvOiAoY2FyZElELCBpc0xpa2VkQnlNZSkgPT4ge1xyXG4gICAgICAgICAgICBpZiAoaXNMaWtlZEJ5TWUpIHtcclxuICAgICAgICAgICAgICAgIGFwaS5saWtlQ2FyZChjYXJkSUQpO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgYXBpLnVubGlrZUNhcmQoY2FyZElEKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICB9LCBjYXJkc0NvbmZpZy5jYXJkU2VsZWN0b3IpO1xyXG4gICAgY2FyZHNMaXN0LmFkZEl0ZW0oY2FyZC5nZW5lcmF0ZUNhcmQoY2FuRGVsZXRlLCBteUlEKSk7XHJcbn1cclxuY29uc3QgY2FyZHNMaXN0ID0gbmV3IFNlY3Rpb24oe1xyXG4gICAgcmVuZGVyZXI6IHJlbmRlckNhcmQsXHJcbn0sIGNhcmRzQ29uZmlnLnBsYWNlc3dyYXApO1xyXG5cclxubGV0IG15SUQgPSBcIjBcIjtcclxubGV0IGhhcmRSZWZyZXNoID0gZmFsc2U7XHJcblxyXG5mdW5jdGlvbiByZWZyZXNoU2NyZWVuKCkge1xyXG4gICAgUHJvbWlzZS5hbGwoW2FwaS5nZXRJbml0aWFsQ2FyZHMoKSwgYXBpLmdldFVzZXJJbmZvKCldKVxyXG4gICAgICAgIC50aGVuKChbY2FyZERhdGEsIHVzZXJEYXRhXSkgPT4ge1xyXG4gICAgICAgICAgICBpZiAoaGFyZFJlZnJlc2ggPT09IHRydWUpIHtcclxuICAgICAgICAgICAgICAgIGxvY2F0aW9uLmhyZWYgPSBsb2NhdGlvbi5ocmVmO1xyXG4gICAgICAgICAgICAgICAgaGFyZFJlZnJlc2ggPSBmYWxzZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBteUlEID0gdXNlckRhdGEuX2lkO1xyXG5cclxuICAgICAgICAgICAgY2FyZHNMaXN0LnJlbmRlckl0ZW1zKGNhcmREYXRhKTtcclxuICAgICAgICAgICAgdXNlckluZm8uc2V0VXNlckluZm8oeyB1c2VyTmFtZTogdXNlckRhdGEubmFtZSwgam9iOiB1c2VyRGF0YS5hYm91dCwgdXNlcklEOiB1c2VyRGF0YS5faWQsIGF2YXRhclVSTDogdXNlckRhdGEuYXZhdGFyIH0pO1xyXG4gICAgICAgIH0pXHJcblxyXG59XHJcbnJlZnJlc2hTY3JlZW4oKTtcclxuLy8tLVxyXG4vL0ltYWdlIFBvcHVwIFNldHVwXHJcbi8vLS1cclxuY29uc3QgaW1hZ2VQb3B1cCA9IG5ldyBQb3B1cFdpdGhJbWFnZShwb3B1cENvbmZpZy5pbWFnZU1vZGFsV2luZG93KTtcclxuY29uc3Qgb3BlbkltYWdlUG9wdXAgPSAoZGF0YSkgPT4geyBpbWFnZVBvcHVwLm9wZW4oZGF0YSk7IH07XHJcbi8vLS1cclxuLy9TdWJtaXRCdXR0b24gVGV4dENvbnRlbnRcclxuLy8tLVxyXG4vL2NvbnN0IHVzZXJJbmZvU3VibWl0VGV4dCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3Ioc3VibWl0QnV0dG9uQ29uZmlnLnByb2ZpbGUpLlxyXG4vLy0tXHJcbi8vVXNlciBJbmZvIFBvcHVwIFNldHVwXHJcbi8vLS1cclxuY29uc3QgdXNlckluZm9Qb3B1cCA9IG5ldyBQb3B1cFdpdGhGb3JtKHtcclxuICAgIHBvcHVwU2VsZWN0b3I6IHBvcHVwQ29uZmlnLmVkaXRGb3JtTW9kYWxXaW5kb3csXHJcbiAgICBoYW5kbGVGb3JtU3VibWl0OiAoZGF0YSkgPT4ge1xyXG4gICAgICAgIHVzZXJJbmZvUG9wdXAuY2hhbmdlU3VibWl0QnRuVGV4dChcIlVwZGF0aW5nIHByb2ZpbGUgaW5mb3JtYXRpb25cIik7XHJcbiAgICAgICAgYXBpLmVkaXRQcm9maWxlKHsgdXNlck5hbWU6IGRhdGEubmFtZSwgYWJvdXQ6IGRhdGEuam9iIH0pXHJcbiAgICAgICAgICAgIC50aGVuKHJlcyA9PiB7XHJcbiAgICAgICAgICAgICAgICBpZiAocmVzLm9rKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdXNlckluZm8uc2V0VXNlckluZm8oeyB1c2VyTmFtZTogZGF0YS5uYW1lLCBqb2I6IGRhdGEuam9iIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgIGhhcmRSZWZyZXNoID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICB1c2VySW5mb1BvcHVwLmNoYW5nZVN1Ym1pdEJ0blRleHQoXCJQcm9maWxlIEluZm9ybWF0aW9uIHVwZGF0ZWQgc3VjY2Vzc2Z1bGx5XCIpO1xyXG4gICAgICAgICAgICAgICAgICAgIC8vcmVmcmVzaFNjcmVlbigpO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcImVycm9yIHVwZGF0aW5nIFVzZXIgUHJvZmlsZVwiKTtcclxuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhyZXMuc3RhdHVzVGV4dCk7XHJcbiAgICAgICAgICAgICAgICAgICAgdXNlckluZm9Qb3B1cC5jaGFuZ2VTdWJtaXRCdG5UZXh0KHJlcy5zdGF0dXNUZXh0KTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgLmZpbmFsbHkocmVzID0+IHtcclxuICAgICAgICAgICAgICAgIHVzZXJJbmZvUG9wdXAuY2hhbmdlU3VibWl0QnRuVGV4dChcIlNhdmVcIik7XHJcbiAgICAgICAgICAgICAgICB1c2VySW5mb1BvcHVwLmNsb3NlKCk7XHJcbiAgICAgICAgICAgIH0pXHJcblxyXG5cclxuICAgIH1cclxuXHJcbn0pO1xyXG5jb25zdCBkZWxldGVDb25maXJtYXRpb25Qb3B1cCA9IG5ldyBQb3B1cFdpdGhDb25maXJtYXRpb24oe1xyXG4gICAgcG9wdXBTZWxlY3RvcjogcG9wdXBDb25maWcuZGVsZXRlQ29uZmlybWF0aW9uV2luZG93LFxyXG4gICAgaGFuZGxlU3VibWl0OiAoY2FyZElEKSA9PiB7XHJcbiAgICAgICAgLy9kZWxlQ29uZmlybWF0aW9uUG9wdXAuY2hhbmdlU3VibWl0QnRuVGV4dCgpO1xyXG4gICAgICAgIGFwaS5kZWxldGVDYXJkKGNhcmRJRClcclxuICAgICAgICAgICAgLnRoZW4ocmVzID0+IHtcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAocmVzLm1lc3NhZ2UgPT09IFwiVGhpcyBwb3N0IGhhcyBiZWVuIGRlbGV0ZWRcIikge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vZGVsZUNvbmZpcm1hdGlvblBvcHVwLmNoYW5nZVN1Ym1pdEJ0blRleHQoXCJDYXJkIERlbGV0ZWRcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgaGFyZFJlZnJlc2ggPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgIHJlZnJlc2hTY3JlZW4oKTtcclxuXHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIHJlamVjdChcImVycm9yIHdoaWxlIGRlbGV0aW5nIGltYWdlIGZyb20gc2VydmVyXCIpXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgIC5jYXRjaChlcnJvciA9PiB7XHJcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhlcnJvcik7XHJcbiAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgIC5maW5hbGx5KHJlcyA9PiB7XHJcbiAgICAgICAgICAgICAgICAvL2RlbGV0ZUNvbmZpcm1hdGlvblBvcHVwLmNoYW5nZVN1Ym1pdEJ0blRleHQoXCJZZXNcIik7XHJcbiAgICAgICAgICAgICAgICBkZWxldGVDb25maXJtYXRpb25Qb3B1cC5jbG9zZSgpO1xyXG4gICAgICAgICAgICB9KVxyXG5cclxuICAgIH1cclxufSk7XHJcbmNvbnN0IG9wZW5EZWxldGVDb25maXJtYXRpb25Qb3B1cCA9IChkYXRhKSA9PiB7IGRlbGV0ZUNvbmZpcm1hdGlvblBvcHVwLm9wZW4oZGF0YSk7IH07XHJcblxyXG4vLy0tXHJcbi8vQWRkIENhcmQgUG9wdXAgU2V0dXBcclxuLy8tLVxyXG5jb25zdCBuZXdDYXJkUG9wdXAgPSBuZXcgUG9wdXBXaXRoRm9ybSh7XHJcbiAgICBwb3B1cFNlbGVjdG9yOiBwb3B1cENvbmZpZy5jYXJkRm9ybU1vZGFsV2luZG93LFxyXG4gICAgaGFuZGxlRm9ybVN1Ym1pdDogKGRhdGEpID0+IHtcclxuICAgICAgICBuZXdDYXJkUG9wdXAuY2hhbmdlU3VibWl0QnRuVGV4dChcIkFkZGluZyBuZXcgcGhvdG9cIik7XHJcbiAgICAgICAgYXBpLmFkZENhcmQoZGF0YSlcclxuICAgICAgICAgICAgLnRoZW4ocmVzID0+IHtcclxuICAgICAgICAgICAgICAgIGRhdGEub3duZXIgPSB7IF9pZDogdXNlckluZm8uZ2V0VXNlcklEKCkgfTtcclxuICAgICAgICAgICAgICAgIGlmIChyZXMub2spIHtcclxuICAgICAgICAgICAgICAgICAgICBoYXJkUmVmcmVzaCA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgcmVmcmVzaFNjcmVlbigpO1xyXG4gICAgICAgICAgICAgICAgICAgIG5ld0NhcmRQb3B1cC5jaGFuZ2VTdWJtaXRCdG5UZXh0KFwiTmV3IHBob3RvIHN1Y2Nlc3NmdWxseSBhZGRlZFwiKTtcclxuXHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiRXJyb3IgYWRkaW5nIENhcmRcIik7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAuY2F0Y2goe1xyXG5cclxuICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgLmZpbmFsbHkocmVzID0+IHtcclxuICAgICAgICAgICAgICAgIG5ld0NhcmRQb3B1cC5jaGFuZ2VTdWJtaXRCdG5UZXh0KFwiU2F2ZVwiKTtcclxuICAgICAgICAgICAgICAgIG5ld0NhcmRQb3B1cC5jbG9zZSgpO1xyXG4gICAgICAgICAgICB9KVxyXG5cclxuICAgIH1cclxufSk7XHJcblxyXG5jb25zdCBjaGFuZ2VBdmF0YXJQb3B1cCA9IG5ldyBQb3B1cFdpdGhGb3JtKHtcclxuICAgIHBvcHVwU2VsZWN0b3I6IHBvcHVwQ29uZmlnLmNoYW5nZUF2YXRhck1vZGFsV2luZG93LFxyXG4gICAgaGFuZGxlRm9ybVN1Ym1pdDogKGRhdGEpID0+IHtcclxuICAgICAgICBjaGFuZ2VBdmF0YXJQb3B1cC5jaGFuZ2VTdWJtaXRCdG5UZXh0KFwiVXBkYXRpbmcgYXZhdGFyIGltYWdlXCIpO1xyXG4gICAgICAgIGFwaS51cGRhdGVBdmF0YXIoZGF0YSlcclxuICAgICAgICAgICAgLnRoZW4ocmVzID0+IHtcclxuICAgICAgICAgICAgICAgIGlmIChyZXMuYXZhdGFyID09PSBkYXRhLmxpbmspIHtcclxuICAgICAgICAgICAgICAgICAgICBoYXJkUmVmcmVzaCA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgY2hhbmdlQXZhdGFyUG9wdXAuY2hhbmdlU3VibWl0QnRuVGV4dChcIkF2YXRhciBzdWNjZXNzZnVsbHkgdXBkYXRlZFwiKTtcclxuICAgICAgICAgICAgICAgICAgICByZWZyZXNoU2NyZWVuKCk7XHJcblxyXG5cclxuXHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiRXJyb3IgY2hhbmdpbmcgQXZhdGFyIGltYWdlXCIpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgLmNhdGNoKHtcclxuXHJcbiAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgIC5maW5hbGx5KHJlcyA9PiB7XHJcbiAgICAgICAgICAgICAgICBjaGFuZ2VBdmF0YXJQb3B1cC5jaGFuZ2VTdWJtaXRCdG5UZXh0KFwiU2F2ZVwiKTtcclxuICAgICAgICAgICAgICAgIGNoYW5nZUF2YXRhclBvcHVwLmNsb3NlKCk7XHJcbiAgICAgICAgICAgIH0pXHJcblxyXG4gICAgfVxyXG59KVxyXG5cclxuLy8tLVxyXG4vL0Zvcm0gVmFsaWRhdG9yIHNldHRpbmdzXHJcbi8vLS1cclxuY29uc3QgcHJvZmlsZUZvcm1WYWxpZGF0b3IgPSBuZXcgRm9ybVZhbGlkYXRvcihkZWZhdWx0Rm9ybUNvbmZpZywgdXNlckluZm9Qb3B1cC5wb3B1cEVsZW1lbnQpO1xyXG5jb25zdCBwbGFjZUZvcm1WYWxpZGF0b3IgPSBuZXcgRm9ybVZhbGlkYXRvcihkZWZhdWx0Rm9ybUNvbmZpZywgbmV3Q2FyZFBvcHVwLnBvcHVwRWxlbWVudCk7XHJcbmNvbnN0IGNoYW5nZUF2YXRhckZvcm1WYWxpZGF0b3IgPSBuZXcgRm9ybVZhbGlkYXRvcihkZWZhdWx0Rm9ybUNvbmZpZywgY2hhbmdlQXZhdGFyUG9wdXAucG9wdXBFbGVtZW50KTtcclxuLy8tLVxyXG4vL0V2ZW50TGlzdGVuZXJzXHJcbi8vLS1cclxuaW1hZ2VQb3B1cC5zZXRFdmVudExpc3RlbmVycygpO1xyXG51c2VySW5mb1BvcHVwLnNldEV2ZW50TGlzdGVuZXJzKCk7XHJcbm5ld0NhcmRQb3B1cC5zZXRFdmVudExpc3RlbmVycygpO1xyXG5kZWxldGVDb25maXJtYXRpb25Qb3B1cC5zZXRFdmVudExpc3RlbmVycygpO1xyXG5jaGFuZ2VBdmF0YXJQb3B1cC5zZXRFdmVudExpc3RlbmVycygpO1xyXG4vLy0tXHJcbi8vSW5pdGlhbCBDYXJkcyAvIFBsYWNlc1xyXG4vLy0tXHJcbi8vY2FyZHNMaXN0LnJlbmRlckl0ZW1zKGluaXRpYWxDYXJkcyk7XHJcblxyXG4vLy0tXHJcbi8vRW5hYmxlIEZvcm0gVmFsaWRhdG9yc1xyXG4vLy0tXHJcbnByb2ZpbGVGb3JtVmFsaWRhdG9yLmVuYWJsZVZhbGlkYXRpb24oKTtcclxucGxhY2VGb3JtVmFsaWRhdG9yLmVuYWJsZVZhbGlkYXRpb24oKTtcclxuY2hhbmdlQXZhdGFyRm9ybVZhbGlkYXRvci5lbmFibGVWYWxpZGF0aW9uKCk7XHJcbi8vLS1cclxuLy9ET00gdG8gSlNcclxuLy8tLVxyXG5cclxuY29uc3Qgb3BlblByb2ZpbGVGb3JtID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnByb2ZpbGVfX2VkaXQtYnRuJyk7XHJcbmNvbnN0IG9wZW5QbGFjZUZvcm0gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcucHJvZmlsZV9fYWRkLWJ0bicpO1xyXG5jb25zdCBvcGVuQXZhdGFyRm9ybSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5wcm9maWxlX19lZGl0LWF2YXRhci1idG4nKTtcclxuY29uc3Qgb3BlblByb2ZpbGVGb3JtV2l0aEN1cnJlbnRJbmZvID0gKCkgPT4ge1xyXG4gICAgdXNlckluZm9Qb3B1cC5vcGVuKCk7XHJcbiAgICB1c2VySW5mb1BvcHVwLnByZWZpbGxGb3JtKHVzZXJJbmZvLmdldFVzZXJJbmZvKCkpO1xyXG4gICAgcHJvZmlsZUZvcm1WYWxpZGF0b3IucmVzZXRWYWxpZGF0aW9uKCk7XHJcbn1cclxuXHJcbm9wZW5Qcm9maWxlRm9ybS5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIG9wZW5Qcm9maWxlRm9ybVdpdGhDdXJyZW50SW5mbyk7XHJcblxyXG5jb25zdCBvcGVuUGxhY2VGb3JtRW1wdHkgPSAoKSA9PiB7XHJcbiAgICBuZXdDYXJkUG9wdXAub3BlbigpO1xyXG4gICAgcGxhY2VGb3JtVmFsaWRhdG9yLnJlc2V0VmFsaWRhdGlvbigpO1xyXG59XHJcbm9wZW5QbGFjZUZvcm0uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBvcGVuUGxhY2VGb3JtRW1wdHkpO1xyXG5jb25zdCBjaGFuZ2VBdmF0YXJJbWFnZSA9ICgpID0+IHtcclxuICAgIGNoYW5nZUF2YXRhclBvcHVwLm9wZW4oKTtcclxuICAgIGNoYW5nZUF2YXRhckZvcm1WYWxpZGF0b3IucmVzZXRWYWxpZGF0aW9uKCk7XHJcbn1cclxub3BlbkF2YXRhckZvcm0uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBjaGFuZ2VBdmF0YXJJbWFnZSk7IiwiIGNsYXNzIFVzZXJJbmZvIHtcclxuICAgICBjb25zdHJ1Y3Rvcih7IG5hbWVTZWxlY3Rvciwgam9iU2VsZWN0b3IsIGF2YXRhclNlbGVjdG9yIH0pIHtcclxuICAgICAgICAgdGhpcy5uYW1lRWxlbWVudCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IobmFtZVNlbGVjdG9yKTtcclxuICAgICAgICAgdGhpcy5qb2JFbGVtZW50ID0gZG9jdW1lbnQucXVlcnlTZWxlY3Rvcihqb2JTZWxlY3Rvcik7XHJcbiAgICAgICAgIHRoaXMuYXZhdGFyRWxlbWVudCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoYXZhdGFyU2VsZWN0b3IpO1xyXG4gICAgIH1cclxuXHJcbiAgICAgZ2V0VXNlckluZm8oKSB7XHJcbiAgICAgICAgIGNvbnN0IHVzZXIgPSB7XHJcbiAgICAgICAgICAgICBuYW1lOiB0aGlzLm5hbWVFbGVtZW50LnRleHRDb250ZW50LFxyXG4gICAgICAgICAgICAgam9iOiB0aGlzLmpvYkVsZW1lbnQudGV4dENvbnRlbnQsXHJcbiAgICAgICAgIH1cclxuICAgICAgICAgcmV0dXJuIHVzZXI7XHJcbiAgICAgfVxyXG5cclxuICAgICBzZXRVc2VySW5mbyh7IHVzZXJOYW1lLCBqb2IsIHVzZXJJRCwgYXZhdGFyVVJMIH0pIHtcclxuICAgICAgICAgdGhpcy5uYW1lRWxlbWVudC50ZXh0Q29udGVudCA9IHVzZXJOYW1lO1xyXG4gICAgICAgICB0aGlzLmpvYkVsZW1lbnQudGV4dENvbnRlbnQgPSBqb2I7XHJcbiAgICAgICAgIHRoaXMudXNlcklEID0gdXNlcklEO1xyXG4gICAgICAgICB0aGlzLmF2YXRhckVsZW1lbnQuc3R5bGUuYmFja2dyb3VuZEltYWdlID0gYHVybCgke2F2YXRhclVSTH0pYDtcclxuICAgICB9XHJcbiAgICAgZ2V0VXNlcklEKCkge1xyXG4gICAgICAgICByZXR1cm4gdGhpcy51c2VySUQ7XHJcbiAgICAgfVxyXG4gICAgIHNldEF2YXRhcihhdmF0YXJVUkwpIHtcclxuICAgICAgICAgdGhpcy5hdmF0YXJFbGVtZW50LnN0eWxlLmJhY2tncm91bmRJbWFnZSA9IGB1cmwoJHthdmF0YXJVUkx9KWA7XHJcbiAgICAgfVxyXG5cclxuIH1cclxuIGV4cG9ydCBkZWZhdWx0IFVzZXJJbmZvOyIsImNsYXNzIFNlY3Rpb24ge1xyXG4gICAgY29uc3RydWN0b3IoeyAvKml0ZW1zLCovIHJlbmRlcmVyIH0sIGNvbnRhaW5lclNlbGVjdG9yKSB7XHJcbiAgICAgICAgLy90aGlzLl9pdGVtcyA9IGl0ZW1zO1xyXG4gICAgICAgIHRoaXMuX3JlbmRlcmVyID0gcmVuZGVyZXI7IC8vKCk7XHJcbiAgICAgICAgdGhpcy5fY29udGFpbmVyID0gZG9jdW1lbnQucXVlcnlTZWxlY3Rvcihjb250YWluZXJTZWxlY3Rvcik7XHJcbiAgICB9XHJcbiAgICBhZGRJdGVtKGVsZW1lbnQpIHtcclxuICAgICAgICB0aGlzLl9jb250YWluZXIucHJlcGVuZChlbGVtZW50KTtcclxuICAgIH1cclxuICAgIHJlbmRlckl0ZW1zKGl0ZW1zKSB7XHJcbiAgICAgICAgaXRlbXMuZm9yRWFjaChpdGVtID0+IHtcclxuICAgICAgICAgICAgdGhpcy5fcmVuZGVyZXIoaXRlbSk7XHJcbiAgICAgICAgfSlcclxuXHJcbiAgICB9XHJcbn1cclxuZXhwb3J0IGRlZmF1bHQgU2VjdGlvbjsiLCJpbXBvcnQgUG9wdXAgZnJvbSBcIi4vUG9wdXBcIjtcclxuXHJcbmNsYXNzIFBvcHVwV2l0aEltYWdlIGV4dGVuZHMgUG9wdXAge1xyXG4gICAgb3BlbiA9ICh7IGxpbmssIG5hbWUgfSkgPT4ge1xyXG4gICAgICAgIC8vcHV0cyBuYW1lIGZyb20gYXJncyB0byB0aGUgLnBvcHVwX19jYXB0aW9uIHNlbGVjdG9yXHJcbiAgICAgICAgY29uc3QgaW1hZ2VDYXB0aW9uID0gdGhpcy5wb3B1cEVsZW1lbnQucXVlcnlTZWxlY3RvcignLnBvcHVwX19pbWFnZS10aXRsZScpO1xyXG4gICAgICAgIGltYWdlQ2FwdGlvbi50ZXh0Q29udGVudCA9IG5hbWU7XHJcbiAgICAgICAgLy9maW5kIGltYWdlIGJ5IHRoZSBcIi5wb3B1cF9faW1hZ2VcIiBzZWxlY3Rvciwgc2V0IGFsdCBhbmQgc3JjIGZvciBpdFxyXG4gICAgICAgIGNvbnN0IGltYWdlRWxlbWVudCA9IHRoaXMucG9wdXBFbGVtZW50LnF1ZXJ5U2VsZWN0b3IoJy5wb3B1cF9faW1hZ2UnKTtcclxuICAgICAgICBpbWFnZUVsZW1lbnQuc3JjID0gbGluaztcclxuICAgICAgICBpbWFnZUVsZW1lbnQuYWx0ID0gbmFtZTtcclxuICAgICAgICAvL2NhbGwgc3VwZXIub3BlbigpOyBcclxuICAgICAgICBzdXBlci5vcGVuKCk7XHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IFBvcHVwV2l0aEltYWdlOyIsImltcG9ydCBQb3B1cCBmcm9tIFwiLi9Qb3B1cFwiO1xyXG5jbGFzcyBQb3B1cFdpdGhDb25maXJtYXRpb24gZXh0ZW5kcyBQb3B1cCB7XHJcbiAgICBjb25zdHJ1Y3Rvcih7IHBvcHVwU2VsZWN0b3IsIGhhbmRsZVN1Ym1pdCB9KSB7XHJcbiAgICAgICAgc3VwZXIocG9wdXBTZWxlY3Rvcik7IC8vdGhpcy5wb3B1cEVsZW1lbnRcclxuICAgICAgICB0aGlzLl9oYW5kbGVTdWJtaXQgPSBoYW5kbGVTdWJtaXQ7XHJcbiAgICAgICAgdGhpcy5fY29uZmlybWF0aW9uID0gdGhpcy5wb3B1cEVsZW1lbnQucXVlcnlTZWxlY3RvcignLnBvcHVwX19jb25maXJtYXRpb24nKTtcclxuICAgIH1cclxuICAgIF9jb25maXJtU3VibWl0KGV2ZW50KSB7XHJcbiAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICB0aGlzLl9oYW5kbGVTdWJtaXQodGhpcy5jYXJkSUQpO1xyXG4gICAgICAgIHRoaXMuY2xvc2UoKTtcclxuICAgIH1cclxuICAgIG9wZW4oY2FyZElEKSB7XHJcbiAgICAgICAgY29uc29sZS5sb2coXCJQb3B1cCB3aXRoIENvbmZpcm1hdGlvbiBPcGVuIGZvciBkZWxldGluZyBDYXJkIElEIFwiLCBjYXJkSUQpXHJcbiAgICAgICAgdGhpcy5jYXJkSUQgPSBjYXJkSUQ7XHJcblxyXG4gICAgICAgIHN1cGVyLm9wZW4oKTtcclxuICAgIH1cclxuICAgIHNldEV2ZW50TGlzdGVuZXJzKCkge1xyXG4gICAgICAgIHN1cGVyLnNldEV2ZW50TGlzdGVuZXJzKCk7XHJcblxyXG4gICAgICAgIHRoaXMuX2NvbmZpcm1hdGlvbi5hZGRFdmVudExpc3RlbmVyKCdzdWJtaXQnLCAoZXZlbnQpID0+IHRoaXMuX2NvbmZpcm1TdWJtaXQoZXZlbnQpKTtcclxuICAgIH1cclxuXHJcbn1cclxuZXhwb3J0IGRlZmF1bHQgUG9wdXBXaXRoQ29uZmlybWF0aW9uOyJdLCJuYW1lcyI6WyJjb25zdHJ1Y3RvciIsInNldHRpbmdzIiwiZm9ybUVsZW1lbnQiLCJ0aGlzIiwiX2hpZGVJbnB1dEVycm9yIiwiaW5wdXQiLCJlcnJvckVsZW1lbnQiLCJxdWVyeVNlbGVjdG9yIiwiaWQiLCJ0ZXh0Q29udGVudCIsImNsYXNzTGlzdCIsInJlbW92ZSIsImVycm9yQ2xhc3MiLCJpbnB1dEVycm9yQ2xhc3MiLCJfc2hvd0lucHV0RXJyb3IiLCJ2YWxpZGF0aW9uTWVzc2FnZSIsImFkZCIsIl9jaGVja0lucHV0VmFsaWRpdHkiLCJ2YWxpZGl0eSIsInZhbGlkIiwiX2hhc0ludmFsaWRJbnB1dCIsImlucHV0TGlzdCIsInNvbWUiLCJpbnB1dEVsZW1lbnQiLCJfdG9nZ2xlQnV0dG9uU3RhdGUiLCJidXR0b24iLCJpbmFjdGl2ZUJ1dHRvbkNsYXNzIiwiZGlzYWJsZWQiLCJfc2V0RXZlbnRMaXN0bmVycyIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJpbnB1dFNlbGVjdG9yIiwic3VibWl0QnV0dG9uU2VsZWN0b3IiLCJmb3JFYWNoIiwiYWRkRXZlbnRMaXN0ZW5lciIsImVuYWJsZVZhbGlkYXRpb24iLCJlIiwicHJldmVudERlZmF1bHQiLCJyZXNldFZhbGlkYXRpb24iLCJkZWZhdWx0Rm9ybUNvbmZpZyIsImZvcm1TZWxlY3RvciIsInBvcHVwU2VsZWN0b3IiLCJwb3B1cEVsZW1lbnQiLCJkb2N1bWVudCIsIl9oYW5kbGVFc2NVcCIsImJpbmQiLCJjbG9zZSIsIm9wZW4iLCJldnQiLCJrZXkiLCJzZXRFdmVudExpc3RlbmVycyIsInRhcmdldCIsIl9oYW5kbGVPdmVybGF5Q2xpY2siLCJyZW1vdmVFdmVudExpc3RlbmVyIiwiUG9wdXAiLCJoYW5kbGVGb3JtU3VibWl0Iiwic3VwZXIiLCJfZm9ybSIsInJlc2V0IiwiX2hhbmRsZUZvcm1TdWJtaXQiLCJfc3VibWl0QnRuIiwiX2dldElucHV0VmFsdWVzIiwiaW5wdXRzIiwiaW5wdXRWYWx1ZXMiLCJuYW1lIiwidmFsdWUiLCJjaGFuZ2VTdWJtaXRCdG5UZXh0IiwibXNnIiwiX2Zvcm1TdWJtaXQiLCJwcmVmaWxsRm9ybSIsImFwaSIsImJhc2VVUkwiLCJoZWFkZXJzIiwiX2N1c3RvbUZldGNoIiwidXJsIiwiZmV0Y2giLCJtZXRob2QiLCJ0aGVuIiwicmVzIiwib2siLCJqc29uIiwiUHJvbWlzZSIsInJlamVjdCIsInN0YXR1c1RleHQiLCJjYXRjaCIsImVyciIsImNvbnNvbGUiLCJsb2ciLCJnZXRJbml0aWFsQ2FyZHMiLCJnZXRVc2VySW5mbyIsImVkaXRQcm9maWxlIiwidXNlck5hbWUiLCJhYm91dCIsImJvZHkiLCJKU09OIiwic3RyaW5naWZ5IiwiYWRkQ2FyZCIsImxpbmsiLCJkZWxldGVDYXJkIiwiY2FyZElEIiwiZ2V0TGlrZXNDb3VudCIsInJlc3VsdCIsImxpa2VzIiwibGVuZ3RoIiwiaXNNeUNhcmQiLCJvd25lciIsIl9pZCIsImF1dGhvcmlzYXRpb24iLCJsaWtlQ2FyZCIsInVubGlrZUNhcmQiLCJ1cGRhdGVBdmF0YXIiLCJhdmF0YXIiLCJhdXRob3JpemF0aW9uIiwidXNlckluZm8iLCJuYW1lU2VsZWN0b3IiLCJqb2JTZWxlY3RvciIsImF2YXRhclNlbGVjdG9yIiwibmFtZUVsZW1lbnQiLCJqb2JFbGVtZW50IiwiYXZhdGFyRWxlbWVudCIsImpvYiIsInNldFVzZXJJbmZvIiwidXNlcklEIiwiYXZhdGFyVVJMIiwic3R5bGUiLCJiYWNrZ3JvdW5kSW1hZ2UiLCJnZXRVc2VySUQiLCJzZXRBdmF0YXIiLCJjYXJkc0xpc3QiLCJjb250YWluZXJTZWxlY3RvciIsInJlbmRlcmVyIiwiX3JlbmRlcmVyIiwiX2NvbnRhaW5lciIsImFkZEl0ZW0iLCJlbGVtZW50IiwicHJlcGVuZCIsInJlbmRlckl0ZW1zIiwiaXRlbXMiLCJpdGVtIiwiZGF0YSIsImNhbkRlbGV0ZSIsIm15SUQiLCJjYXJkIiwidGVtcGxhdGVTZWxlY3RvciIsIl90aXRsZSIsIl9pbWFnZVVybCIsIl9jYXJkSUQiLCJfb3duZXJJRCIsIl9saWtlcyIsIl9oYW5kbGVDYXJkQ2xpY2siLCJoYW5kbGVDYXJkQ2xpY2siLCJfY29uZmlybURlbGV0ZSIsImNvbmZpcm1EZWxldGUiLCJfdG9nZ2xlTXlMaWtlVG8iLCJ0b2dnbGVNeUxpa2VUbyIsIl90ZW1wbGF0ZVNlbGVjdG9yIiwiX2RvSUxpa2UiLCJfZ2V0VGVtcGxhdGUiLCJfY2FyZEVsZW1lbnQiLCJjb250ZW50IiwiY2xvbmVOb2RlIiwiX2FkZERhdGFUb0NhcmQiLCJ0aXRsZSIsImltYWdlIiwibGlrZXNDb3VudCIsInVuZGVmaW5lZCIsInNyYyIsImFsdCIsImlkT2ZMaWtlciIsIl9teUlEIiwiX2FkZEV2ZW50TGlzdGVuZXJzIiwiZGVsZXRlQnRuIiwibGlrZUJ0biIsImlzTGlrZWRCeU1lIiwiZmluZCIsIl9zZXRMaWtlSWNvbiIsIk51bWJlciIsImdlbmVyYXRlQ2FyZCIsIm9wZW5JbWFnZVBvcHVwIiwib3BlbkRlbGV0ZUNvbmZpcm1hdGlvblBvcHVwIiwiaGFyZFJlZnJlc2giLCJyZWZyZXNoU2NyZWVuIiwiYWxsIiwiY2FyZERhdGEiLCJ1c2VyRGF0YSIsImxvY2F0aW9uIiwiaHJlZiIsImltYWdlUG9wdXAiLCJpbWFnZUVsZW1lbnQiLCJ1c2VySW5mb1BvcHVwIiwiUG9wdXBXaXRoRm9ybSIsImZpbmFsbHkiLCJkZWxldGVDb25maXJtYXRpb25Qb3B1cCIsImhhbmRsZVN1Ym1pdCIsIl9oYW5kbGVTdWJtaXQiLCJfY29uZmlybWF0aW9uIiwiX2NvbmZpcm1TdWJtaXQiLCJldmVudCIsIm1lc3NhZ2UiLCJlcnJvciIsIm5ld0NhcmRQb3B1cCIsImNoYW5nZUF2YXRhclBvcHVwIiwicHJvZmlsZUZvcm1WYWxpZGF0b3IiLCJGb3JtVmFsaWRhdG9yIiwicGxhY2VGb3JtVmFsaWRhdG9yIiwiY2hhbmdlQXZhdGFyRm9ybVZhbGlkYXRvciIsIm9wZW5Qcm9maWxlRm9ybSIsIm9wZW5QbGFjZUZvcm0iLCJvcGVuQXZhdGFyRm9ybSJdLCJzb3VyY2VSb290IjoiIn0=