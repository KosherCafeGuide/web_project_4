!function(){"use strict";var e=class{constructor(e,t){this._settings=e,this._formElement=t}_hideInputError(e){const t=this._formElement.querySelector("#"+e.id+"-error");t.textContent="",t.classList.remove(this._settings.errorClass),e.classList.remove(this._settings.inputErrorClass)}_showInputError(e){const t=this._formElement.querySelector("#"+e.id+"-error");t.textContent=e.validationMessage,t.classList.add(this._settings.errorClass),e.classList.add(this._settings.inputErrorClass)}_checkInputValidity(e){e.validity.valid?this._hideInputError(e):this._showInputError(e)}_hasInvalidInput(){return this.inputList.some((e=>!e.validity.valid))}_toggleButtonState(){this._hasInvalidInput()?(this.button.classList.add(this._settings.inactiveButtonClass),this.button.disabled=!0):(this.button.classList.remove(this._settings.inactiveButtonClass),this.button.disabled=!1)}_setEventListners(){this.inputList=[...this._formElement.querySelectorAll(this._settings.inputSelector)],this.button=this._formElement.querySelector(this._settings.submitButtonSelector),this.inputList.forEach((e=>{e.addEventListener("input",(()=>{this._checkInputValidity(e),this._toggleButtonState()}))})),this._toggleButtonState()}enableValidation(){this._formElement.addEventListener("submit",(e=>e.preventDefault())),this._setEventListners()}resetValidation(){this.inputList.forEach((e=>{this._hideInputError(e)})),this._toggleButtonState()}};const t={formSelector:".popup__form",inputSelector:".popup__input",submitButtonSelector:".popup__button",inactiveButtonClass:"popup__button_disabled",inputErrorClass:"popup__input_type_error",errorClass:"popup__error_visible"};var s=class{constructor(e){this.popupElement=document.querySelector(e),this._handleEscUp=this._handleEscUp.bind(this),this.close=this.close.bind(this),this.open=this.open.bind(this)}_handleEscUp(e){e.preventDefault(),"Escape"===e.key&&this.close()}setEventListeners(){this.popupElement.querySelector(".cancel").addEventListener("click",this.close),this.popupElement.addEventListener("mousedown",(e=>{e.target===this.popupElement&&this.close()}))}_handleOverlayClick(e){e.target===this.popupElement&&this.close()}open(){this.popupElement.classList.add("popup_opened"),document.addEventListener("keyup",this._handleEscUp)}close(){this.popupElement.classList.remove("popup_opened"),document.removeEventListener("keyup",this._handleEscUp)}},i=class extends s{constructor(e){let{popupSelector:t,handleFormSubmit:s}=e;var i,n;super(t),n=()=>{this._form.reset(),super.close()},(i="close")in this?Object.defineProperty(this,i,{value:n,enumerable:!0,configurable:!0,writable:!0}):this[i]=n,this._handleFormSubmit=s,this._form=this.popupElement.querySelector(".popup__form"),this._submitBtn=this._form.querySelector(".popup__button"),this._inputs=[...this._form.querySelectorAll(".popup__input")]}_getInputValues(){const e={};return this._inputs.forEach((t=>{e[t.name]=t.value})),e}changeSubmitBtnText(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"saving";this._submitBtn.textContent=e}_formSubmit(){this._handleFormSubmit(this._getInputValues())}setEventListeners(){super.setEventListeners(),this._form.addEventListener("submit",(e=>this._formSubmit(e)))}prefillForm(e){this._inputs.forEach((t=>{t.value=e[t.name]}))}};const n=new class{constructor(e){let{baseURL:t,headers:s}=e;this.baseURL=t,this.headers=s}_checkResponse(e){return e.ok?e.json():Promise.reject(e.statusText)}_customFetch(e){return fetch(e,{method:arguments.length>1&&void 0!==arguments[1]?arguments[1]:"GET",headers:this.headers}).then(this._checkResponse)}getInitialCards(){return this._customFetch("".concat(this.baseURL,"/cards"))}getUserInfo(){return this._customFetch("".concat(this.baseURL,"/users/me"))}editProfile(e){let{userName:t,about:s}=e;return fetch("".concat(this.baseURL,"/users/me"),{method:"PATCH",headers:this.headers,body:JSON.stringify({name:t,about:s})}).then(this._checkResponse)}addCard(e){let{name:t,link:s}=e;return fetch("".concat(this.baseURL,"/cards"),{method:"POST",headers:this.headers,body:JSON.stringify({name:t,link:s})}).then(this._checkResponse)}deleteCard(e){return this._customFetch("".concat(this.baseURL,"/cards/").concat(e),"DELETE")}getLikesCount(e){return console.log("getLikesCount cardID ",e),this._customFetch("".concat(this.baseURL,"/cards/likes/").concat(e),"GET").then((e=>(console.log("result",e),e.likes.length)))}isMyCard(e){return fetch("".concat(this.baseURL,"/cards/").concat(e),{headers:this.headers}).then(this._checkResponse).then((e=>e.owner._id===this.authorisation))}likeCard(e){return this._customFetch("".concat(this.baseURL,"/cards/likes/").concat(e),"PUT")}unlikeCard(e){return this._customFetch("".concat(this.baseURL,"/cards/likes/").concat(e),"DELETE")}updateAvatar(e){let{link:t}=e;return fetch("".concat(this.baseURL,"/users/me/avatar"),{method:"PATCH",headers:this.headers,body:JSON.stringify({avatar:t})}).then(this._checkResponse)}}({baseURL:"https://around.nomoreparties.co/v1/group-12",headers:{authorization:"077e02f5-469c-4925-a110-e7daac9f6ead","Content-Type":"application/json"}});const r=new class{constructor(e){let{nameSelector:t,jobSelector:s,avatarSelector:i}=e;this.nameElement=document.querySelector(t),this.jobElement=document.querySelector(s),this.avatarElement=document.querySelector(i)}getUserInfo(){return{name:this.nameElement.textContent,job:this.jobElement.textContent}}setUserInfo(e){let{userName:t,job:s,userID:i,avatarURL:n}=e;this.nameElement.textContent=t,this.jobElement.textContent=s,this.userID=i,this.avatarElement.style.backgroundImage="url(".concat(n,")")}getUserID(){return this.userID}setAvatar(e){this.avatarElement.style.backgroundImage="url(".concat(e,")")}}({nameSelector:".profile__name",jobSelector:".profile__job",avatarSelector:".profile__avatar"}),o=e=>{const t=e.owner._id===c,s=function(e){return new class{constructor(e,t){this._title=e.data.name,this._imageUrl=e.data.link,this._cardID=e.data._id,this._ownerID=e.data.owner._id,this._likes=e.data.likes,this._handleLike=e.handleLike,this._handleUnlike=e.handleUnlike,this._handleCardClick=e.handleCardClick,this._confirmDelete=e.confirmDelete,this._templateSelector=t,this._doILike=this._doILike.bind(this)}_getTemplate(){this._cardElement=document.querySelector(this._templateSelector).content.querySelector(".element").cloneNode(!0)}_addDataToCard(){this.title=this._cardElement.querySelector(".element__image-title"),this.image=this._cardElement.querySelector(".element__image"),this.likesCount=this._cardElement.querySelector(".element__likes-count"),void 0===this._likes&&(this._likes=[]),this.likesCount.textContent=this._likes.length,this.title.textContent=this._title,this.image.src=this._imageUrl,this.image.alt=this._title}deleteCard(){this._cardElement.remove(),this._cardElement=null}_doILike(e){return e._id===this._myID}_addEventListeners(e){const t=this._cardElement.querySelector(".element__delete-btn");e?(t.classList.remove("hide"),t.addEventListener("click",(()=>{this._confirmDelete(this)}))):t.classList.add("hide"),this._likeButton=this._cardElement.querySelector(".element__like-toggle"),this.isLikedByMe=this._likes.find(this._doILike),this.setLikeIcon(),this._likeButton.addEventListener("click",(()=>{this.isLikedByMe?this._handleUnlike(this):this._handleLike(this)})),this.image.addEventListener("click",(()=>{this._handleCardClick({link:this._imageUrl,name:this._title})}))}setLikeIcon(){this.isLikedByMe?this._likeButton.classList.add("element__like-toggle-active"):this._likeButton.classList.remove("element__like-toggle-active")}updateLikesCount(e){this.likesCount.textContent=e}generateCard(e,t){return this._myID=t,this._getTemplate(),this._addDataToCard(),this._addEventListeners(e),this._cardElement}getID(){return this._cardID}}({data:e,handleCardClick:()=>{d(e)},confirmDelete:e=>{_(e)},handleLike:a,handleUnlike:l},"#element")}(e);h.addItem(s.generateCard(t,c))};function a(e){n.likeCard(e.getID()).then((t=>{e.isLikedByMe=!0,e.setLikeIcon(!0),e.updateLikesCount(t.likes.length)})).catch((e=>{console.log(e)})).finally((()=>{}))}function l(e){n.unlikeCard(e.getID()).then((t=>{e.isLikedByMe=!1,e.setLikeIcon(!1),e.updateLikesCount(t.likes.length)})).catch((e=>{console.log(e)}))}const h=new class{constructor(e,t){let{renderer:s}=e;this._renderer=s,this._container=document.querySelector(t)}addItem(e){this._container.prepend(e)}renderItems(e){e.forEach((e=>{this._renderer(e)}))}}({renderer:o},".elements");let c="0";Promise.all([n.getInitialCards(),n.getUserInfo()]).then((e=>{let[t,s]=e;c=s._id,h.renderItems(t),r.setUserInfo({userName:s.name,job:s.about,userID:s._id,avatarURL:s.avatar})})).catch((e=>{console.log(e)}));const u=new class extends s{constructor(e){var t,s;super(e),s=e=>{let{link:t,name:s}=e;this.imageCaption.textContent=s,this.imageElement.src=t,this.imageElement.alt=s,super.open()},(t="open")in this?Object.defineProperty(this,t,{value:s,enumerable:!0,configurable:!0,writable:!0}):this.open=s,this.imageCaption=this.popupElement.querySelector(".popup__image-title"),this.imageElement=this.popupElement.querySelector(".popup__image")}}(".popup-image"),d=e=>{u.open(e)},p=new i({popupSelector:".popup-profile-form",handleFormSubmit:e=>{p.changeSubmitBtnText("Updating profile information"),n.editProfile({userName:e.name,about:e.job}).then((e=>{console.log("res",e),r.setUserInfo({userName:e.name,job:e.about,avatarURL:e.avatar}),p.close()})).catch((e=>{console.log(e)})).finally((()=>{p.changeSubmitBtnText("Save")}))}}),m=new class extends s{constructor(e){let{popupSelector:t,handleSubmit:s}=e;super(t),this._handleSubmit=s,this._confirmation=this.popupElement.querySelector(".popup__confirmation"),this._submitBtn=this._confirmation.querySelector(".popup__button")}_confirmSubmit(e){e.preventDefault(),this._handleSubmit(this.card)}open(e){this.card=e,super.open()}setEventListeners(){super.setEventListeners(),this._confirmation.addEventListener("submit",(e=>this._confirmSubmit(e)))}changeSubmitBtnText(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"saving";this._submitBtn.textContent=e}}({popupSelector:".popup-delete-confirmation",handleSubmit:e=>{m.changeSubmitBtnText("Deleting..."),n.deleteCard(e.getID()).then((t=>{e.deleteCard(),m.close()})).catch((e=>{console.log(e)})).finally((()=>{m.changeSubmitBtnText("Yes")}))}}),_=e=>{m.open(e)},g=new i({popupSelector:".popup-place-form",handleFormSubmit:e=>{g.changeSubmitBtnText("Adding new photo"),n.addCard(e).then((t=>{e.owner={_id:r.getUserID()},e._id=t._id,e.owner._id=c,o(e),g.close()})).catch((e=>{console.log(e)})).finally((()=>{g.changeSubmitBtnText("Save")}))}}),b=new i({popupSelector:".popup-avatar-form",handleFormSubmit:e=>{b.changeSubmitBtnText("Updating avatar image"),n.updateAvatar(e).then((t=>{t.avatar===e.link?(r.setAvatar(e.link),b.close()):reject("Error changing Avatar image")})).catch((e=>{console.log(e)})).finally((e=>{b.changeSubmitBtnText("Save")}))}}),E=new e(t,p.popupElement),v=new e(t,g.popupElement),k=new e(t,b.popupElement);u.setEventListeners(),p.setEventListeners(),g.setEventListeners(),m.setEventListeners(),b.setEventListeners(),E.enableValidation(),v.enableValidation(),k.enableValidation();const L=document.querySelector(".profile__edit-btn"),f=document.querySelector(".profile__add-btn"),S=document.querySelector(".profile__edit-avatar-btn");L.addEventListener("click",(()=>{p.open(),p.prefillForm(r.getUserInfo()),E.resetValidation()})),f.addEventListener("click",(()=>{g.open(),v.resetValidation()})),S.addEventListener("click",(()=>{b.open(),k.resetValidation()}))}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,