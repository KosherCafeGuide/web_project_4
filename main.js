!function(){"use strict";var e=class{constructor(e,t){this.settings=e,this.formElement=t}_hideInputError(e){const t=this.formElement.querySelector("#"+e.id+"-error");t.textContent="",t.classList.remove(this.settings.errorClass),e.classList.remove(this.settings.inputErrorClass)}_showInputError(e){const t=this.formElement.querySelector("#"+e.id+"-error");t.textContent=e.validationMessage,t.classList.add(this.settings.errorClass),e.classList.add(this.settings.inputErrorClass)}_checkInputValidity(e){e.validity.valid?this._hideInputError(e):this._showInputError(e)}_hasInvalidInput(){return this.inputList.some((e=>!e.validity.valid))}_toggleButtonState(){this._hasInvalidInput()?(this.button.classList.add(this.settings.inactiveButtonClass),this.button.disabled=!0):(this.button.classList.remove(this.settings.inactiveButtonClass),this.button.disabled=!1)}_setEventListners(){this.inputList=[...this.formElement.querySelectorAll(this.settings.inputSelector)],this.button=this.formElement.querySelector(this.settings.submitButtonSelector),this.inputList.forEach((e=>{e.addEventListener("input",(()=>{this._checkInputValidity(e),this._toggleButtonState()}))})),this._toggleButtonState()}enableValidation(){this.formElement.addEventListener("submit",(e=>e.preventDefault())),this._setEventListners()}resetValidation(){this.inputList.forEach((e=>{this._hideInputError(e)})),this._toggleButtonState()}};const t={formSelector:".popup__form",inputSelector:".popup__input",submitButtonSelector:".popup__button",inactiveButtonClass:"popup__button_disabled",inputErrorClass:"popup__input_type_error",errorClass:"popup__error_visible"};var s=class{constructor(e){this.popupElement=document.querySelector(e),this._handleEscUp=this._handleEscUp.bind(this),this.close=this.close.bind(this),this.open=this.open.bind(this)}_handleEscUp(e){e.preventDefault(),"Escape"===e.key&&this.close()}setEventListeners(){this.popupElement.querySelector(".cancel").addEventListener("click",this.close),this.popupElement.addEventListener("mousedown",(e=>{e.target===this.popupElement&&this.close()}))}_handleOverlayClick(e){e.target===this.popupElement&&this.close()}open(){this.popupElement.classList.add("popup_opened"),document.addEventListener("keyup",this._handleEscUp)}close(){this.popupElement.classList.remove("popup_opened"),document.removeEventListener("keyup",this._handleEscUp)}},i=class extends s{constructor(e){let{popupSelector:t,handleFormSubmit:s}=e;var i,n;super(t),n=()=>{this._form.reset(),super.close()},(i="close")in this?Object.defineProperty(this,i,{value:n,enumerable:!0,configurable:!0,writable:!0}):this[i]=n,this._handleFormSubmit=s,this._form=this.popupElement.querySelector(".popup__form"),this._submitBtn=this._form.querySelector(".popup__button")}_getInputValues(){const e=[...this._form.querySelectorAll(".popup__input")],t={};return e.forEach((e=>{t[e.name]=e.value})),t}changeSubmitBtnText(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"saving";this._submitBtn.textContent=e}_formSubmit(){this._handleFormSubmit(this._getInputValues())}setEventListeners(){super.setEventListeners(),this._form.addEventListener("submit",(e=>this._formSubmit(e)))}prefillForm(e){[...this._form.querySelectorAll(".popup__input")].forEach((t=>{t.value=e[t.name]}))}};const n=new class{constructor(e){let{baseURL:t,headers:s}=e;this.baseURL=t,this.headers=s}_customFetch(e){return fetch(e,{method:arguments.length>1&&void 0!==arguments[1]?arguments[1]:"GET",headers:this.headers}).then((e=>e.ok?e.json():Promise.reject(e.statusText))).catch((e=>{console.log(e)}))}getInitialCards(){return this._customFetch("".concat(this.baseURL,"/cards"))}getUserInfo(){return this._customFetch("".concat(this.baseURL,"/users/me"))}editProfile(e){let{userName:t,about:s}=e;return fetch("".concat(this.baseURL,"/users/me"),{method:"PATCH",headers:this.headers,body:JSON.stringify({name:t,about:s})})}addCard(e){let{name:t,link:s}=e;return fetch("".concat(this.baseURL,"/cards"),{method:"POST",headers:this.headers,body:JSON.stringify({name:t,link:s})}).then((e=>e.json()))}deleteCard(e){return this._customFetch("".concat(this.baseURL,"/cards/").concat(e),"DELETE")}getLikesCount(e){return fetch("".concat(this.baseURL,"/cards").concat(e),{headers:this.headers}).then((e=>e.json())).then((e=>e.likes.length))}isMyCard(e){return fetch("".concat(this.baseURL,"/cards/").concat(e),{headers:this.headers}).then((e=>e.json())).then((e=>e.owner._id===this.authorisation))}likeCard(e){return this._customFetch("".concat(this.baseURL,"/cards/likes/").concat(e),"PUT")}unlikeCard(e){return this._customFetch("".concat(this.baseURL,"/cards/likes/").concat(e),"DELETE")}updateAvatar(e){let{link:t}=e;return fetch("".concat(this.baseURL,"/users/me/avatar"),{method:"PATCH",headers:this.headers,body:JSON.stringify({avatar:t})}).then((e=>e.ok?e.json():Promise.reject(e.statusText))).catch((e=>{console.log(e)}))}}({baseURL:"https://around.nomoreparties.co/v1/group-12",headers:{authorization:"077e02f5-469c-4925-a110-e7daac9f6ead","Content-Type":"application/json"}});const r=new class{constructor(e){let{nameSelector:t,jobSelector:s,avatarSelector:i}=e;this.nameElement=document.querySelector(t),this.jobElement=document.querySelector(s),this.avatarElement=document.querySelector(i)}getUserInfo(){return{name:this.nameElement.textContent,job:this.jobElement.textContent}}setUserInfo(e){let{userName:t,job:s,userID:i}=e;this.nameElement.textContent=t,this.jobElement.textContent=s,this.userID=i}getUserID(){return this.userID}setAvatar(e){this.avatarElement.style.backgroundImage="url(".concat(e,")")}}({nameSelector:".profile__name",jobSelector:".profile__job",avatarSelector:".profile__avatar"}),o=e=>{let t=e.owner._id===l;const s=new class{constructor(e,t){this._title=e.data.name,this._imageUrl=e.data.link,this._cardID=e.data._id,this._ownerID=e.data.owner._id,this._likes=e.data.likes,this._handleCardClick=e.handleCardClick,this._confirmDelete=e.confirmDelete,this._toggleMyLikeTo=e.toggleMyLikeTo,this._templateSelector=t,this._doILike=this._doILike.bind(this)}_getTemplate(){this._cardElement=document.querySelector(this._templateSelector).content.querySelector(".element").cloneNode(!0)}_addDataToCard(){this.title=this._cardElement.querySelector(".element__image-title"),this.image=this._cardElement.querySelector(".element__image"),this.likesCount=this._cardElement.querySelector(".element__likes-count"),void 0===this._likes&&(this._likes=[]),this.likesCount.textContent=this._likes.length,this.title.textContent=this._title,this.image.src=this._imageUrl,this.image.alt=this._title}deleteCard(){this._cardElement.remove(),this._cardElement=null}_doILike(e){return e._id===this._myID}_addEventListeners(e){const t=this._cardElement.querySelector(".element__delete-btn");e?(t.classList.remove("hide"),t.addEventListener("click",(()=>{this._confirmDelete(this)}))):t.classList.add("hide"),this.likeBtn=this._cardElement.querySelector(".element__like-toggle"),this.isLikedByMe=this._likes.find(this._doILike),this._setLikeIcon(),this.likeBtn.addEventListener("click",(()=>{this.isLikedByMe=!this.isLikedByMe,this.isLikedByMe?this.likesCount.textContent=Number(this.likesCount.textContent)+1:this.likesCount.textContent=Number(this.likesCount.textContent)-1,this._toggleMyLikeTo(this._cardID,this.isLikedByMe),this._setLikeIcon()})),this.image.addEventListener("click",(()=>{this._handleCardClick({link:this._imageUrl,name:this._title})}))}_setLikeIcon(){this.isLikedByMe?this.likeBtn.classList.add("element__like-toggle-active"):this.likeBtn.classList.remove("element__like-toggle-active")}generateCard(e,t){return this._myID=t,this._getTemplate(),this._addDataToCard(),this._addEventListeners(e),this._cardElement}getID(){return this._cardID}}({data:e,handleCardClick:()=>{h(e)},confirmDelete:e=>{m(e)},toggleMyLikeTo:(e,t)=>{t?n.likeCard(e):n.unlikeCard(e)}},"#element");a.addItem(s.generateCard(t,l))},a=new class{constructor(e,t){let{renderer:s}=e;this._renderer=s,this._container=document.querySelector(t)}addItem(e){this._container.prepend(e)}renderItems(e){e.forEach((e=>{this._renderer(e)}))}}({renderer:o},".elements");let l="0";Promise.all([n.getInitialCards(),n.getUserInfo()]).then((e=>{let[t,s]=e;l=s._id,a.renderItems(t),r.setUserInfo({userName:s.name,job:s.about,userID:s._id}),r.setAvatar(s.avatar)}));const c=new class extends s{constructor(){var e,t;super(...arguments),t=e=>{let{link:t,name:s}=e;this.popupElement.querySelector(".popup__image-title").textContent=s;const i=this.popupElement.querySelector(".popup__image");i.src=t,i.alt=s,super.open()},(e="open")in this?Object.defineProperty(this,e,{value:t,enumerable:!0,configurable:!0,writable:!0}):this.open=t}}(".popup-image"),h=e=>{c.open(e)},u=new i({popupSelector:".popup-profile-form",handleFormSubmit:e=>{u.changeSubmitBtnText("Updating profile information"),n.editProfile({userName:e.name,about:e.job}).then((t=>{t.ok?(r.setUserInfo({userName:e.name,job:e.job}),u.changeSubmitBtnText("Profile Information updated successfully")):(console.log("error updating User Profile"),console.log(t.statusText),u.changeSubmitBtnText(t.statusText))})).finally((e=>{u.changeSubmitBtnText("Save"),u.close()}))}}),d=new class extends s{constructor(e){let{popupSelector:t,handleSubmit:s}=e;super(t),this._handleSubmit=s,this._confirmation=this.popupElement.querySelector(".popup__confirmation"),this._submitBtn=this._confirmation.querySelector(".popup__button")}_confirmSubmit(e){e.preventDefault(),this._handleSubmit(this.card),this.close()}open(e){this.card=e,super.open()}setEventListeners(){super.setEventListeners(),this._confirmation.addEventListener("submit",(e=>this._confirmSubmit(e)))}changeSubmitBtnText(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"saving";this._submitBtn.textContent=e}}({popupSelector:".popup-delete-confirmation",handleSubmit:e=>{d.changeSubmitBtnText("Deleting..."),n.deleteCard(e.getID()).then((t=>{void 0!==t.message?(d.changeSubmitBtnText("Card Deleted"),e.deleteCard()):reject("error while deleting image from server")})).catch((e=>{console.log(e)})).finally((e=>{d.changeSubmitBtnText("Yes"),d.close()}))}}),m=e=>{d.open(e)},p=new i({popupSelector:".popup-place-form",handleFormSubmit:e=>{p.changeSubmitBtnText("Adding new photo"),n.addCard(e).then((t=>{e.owner={_id:r.getUserID()},e._id=t._id,p.changeSubmitBtnText("New photo successfully added"),e.owner._id=l,o(e)})).catch({}).finally((e=>{p.changeSubmitBtnText("Save"),p.close()}))}}),_=new i({popupSelector:".popup-avatar-form",handleFormSubmit:e=>{_.changeSubmitBtnText("Updating avatar image"),n.updateAvatar(e).then((t=>{t.avatar===e.link?(_.changeSubmitBtnText("Avatar successfully updated"),r.setAvatar(e.link)):console.log("Error changing Avatar image")})).catch({}).finally((e=>{_.changeSubmitBtnText("Save"),_.close()}))}}),g=new e(t,u.popupElement),b=new e(t,p.popupElement),v=new e(t,_.popupElement);c.setEventListeners(),u.setEventListeners(),p.setEventListeners(),d.setEventListeners(),_.setEventListeners(),g.enableValidation(),b.enableValidation(),v.enableValidation();const E=document.querySelector(".profile__edit-btn"),f=document.querySelector(".profile__add-btn"),S=document.querySelector(".profile__edit-avatar-btn");E.addEventListener("click",(()=>{u.open(),u.prefillForm(r.getUserInfo()),g.resetValidation()})),f.addEventListener("click",(()=>{p.open(),b.resetValidation()})),S.addEventListener("click",(()=>{_.open(),v.resetValidation()}))}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,